{
  "properties": [
    {
      "name": "spark.app.name",
      "type": "java.lang.String",
      "defaultValue": "spark-job",
      "description": "The name of your application. This will appear in the UI and in log data."
    },
    {
      "name": "spark.driver.cores",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Number of cores to use for the driver process, only in cluster mode."
    },
    {
      "name": "spark.driver.maxResultSize",
      "type": "java.lang.String",
      "defaultValue": "1g",
      "description": "Limit of total size of serialized results of all partitions for each Spark action (e.g. collect) in bytes. Should be at least 1M, or 0 for unlimited. Jobs will be aborted if the total size is above this limit. Having a high limit may cause out-of-memory errors in driver (depends on spark.driver.memory and memory overhead of objects in JVM). Setting a proper limit can protect the driver from out-of-memory errors."
    },
    {
      "name": "spark.driver.memory",
      "type": "java.lang.String",
      "defaultValue": "1g",
      "description": "Amount of memory to use for the driver process, i.e. where SparkContext is initialized, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g). Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-memory command line option or in your default properties file."
    },
    {
      "name": "spark.driver.memoryOverhead",
      "type": "java.lang.String",
      "defaultValue": "driverMemory * spark.driver.memoryOverheadFactor, with minimum of 384",
      "description": "Amount of non-heap memory to be allocated per driver process in cluster mode, in MiB unless otherwise specified. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size (typically 6-10%). This option is currently supported on YARN, Mesos and Kubernetes. Note: Non-heap memory includes off-heap memory (when spark.memory.offHeap.enabled\u003dtrue) and memory used by other driver processes (e.g. python process that goes with a PySpark driver) and memory used by other non-driver processes running in the same container. The maximum memory size of container to running driver is determined by the sum of spark.driver.memoryOverhead and spark.driver.memory."
    },
    {
      "name": "spark.driver.memoryOverheadFactor",
      "type": "java.lang.Double",
      "defaultValue": "0.10",
      "description": "Fraction of driver memory to be allocated as additional non-heap memory per driver process in cluster mode. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size. This value defaults to 0.10 except for Kubernetes non-JVM jobs, which defaults to 0.40. This is done as non-JVM tasks need more non-JVM heap space and such tasks commonly fail with \"Memory Overhead Exceeded\" errors. This preempts this error with a higher default. This value is ignored if spark.driver.memoryOverhead is set directly."
    },
    {
      "name": "spark.driver.resource.{resourceName}.amount",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "Amount of a particular resource type to use on the driver. If this is used, you must also specify the spark.driver.resource.{resourceName}.discoveryScript for the driver to find the resource on startup."
    },
    {
      "name": "spark.driver.resource.{resourceName}.discoveryScript",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "A script for the driver to run to discover a particular resource type. This should write to STDOUT a JSON string in the format of the ResourceInformation class. This has a name and an array of addresses. For a client-submitted driver, discovery script must assign different resource addresses to this driver comparing to other drivers on the same host."
    },
    {
      "name": "spark.driver.resource.{resourceName}.vendor",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Vendor of the resources to use for the driver. This option is currently only supported on Kubernetes and is actually both the vendor and domain following the Kubernetes device plugin naming convention. (e.g. For GPUs on Kubernetes this config would be set to nvidia.com or amd.com)"
    },
    {
      "name": "spark.resources.discoveryPlugin",
      "type": "java.lang.String",
      "defaultValue": "org.apache.spark.resource.ResourceDiscoveryScriptPlugin",
      "description": "Comma-separated list of class names implementing org.apache.spark.api.resource.ResourceDiscoveryPlugin to load into the application. This is for advanced users to replace the resource discovery class with a custom implementation. Spark will try each class specified until one of them returns the resource information for that resource. It tries the discovery script last if none of the plugins return information for that resource."
    },
    {
      "name": "spark.executor.memory",
      "type": "java.lang.String",
      "defaultValue": "1g",
      "description": "Amount of memory to use per executor process, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g)."
    },
    {
      "name": "spark.executor.instances",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Number of Executors."
    },
    {
      "name": "spark.executor.pyspark.memory",
      "type": "java.lang.String",
      "defaultValue": "Not set",
      "description": "The amount of memory to be allocated to PySpark in each executor, in MiB unless otherwise specified. If set, PySpark memory for an executor will be limited to this amount. If not set, Spark will not limit Python\u0027s memory use and it is up to the application to avoid exceeding the overhead memory space shared with other non-JVM processes. When PySpark is run in YARN or Kubernetes, this memory is added to executor resource requests. Note: This feature is dependent on Python\u0027s `resource` module; therefore, the behaviors and limitations are inherited. For instance, Windows does not support resource limiting and actual resource is not limited on MacOS."
    },
    {
      "name": "spark.executor.memoryOverhead",
      "type": "java.lang.String",
      "defaultValue": "executorMemory * spark.executor.memoryOverheadFactor, with minimum of 384",
      "description": "Amount of additional memory to be allocated per executor process, in MiB unless otherwise specified. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the executor size (typically 6-10%). This option is currently supported on YARN and Kubernetes. Note: Additional memory includes PySpark executor memory (when spark.executor.pyspark.memory is not configured) and memory used by other non-executor processes running in the same container. The maximum memory size of container to running executor is determined by the sum of spark.executor.memoryOverhead, spark.executor.memory, spark.memory.offHeap.size and spark.executor.pyspark.memory."
    },
    {
      "name": "spark.executor.memoryOverheadFactor",
      "type": "java.lang.Double",
      "defaultValue": "0.10",
      "description": "Fraction of executor memory to be allocated as additional non-heap memory per executor process. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size. This value defaults to 0.10 except for Kubernetes non-JVM jobs, which defaults to 0.40. This is done as non-JVM tasks need more non-JVM heap space and such tasks commonly fail with \"Memory Overhead Exceeded\" errors. This preempts this error with a higher default. This value is ignored if spark.executor.memoryOverhead is set directly."
    },
    {
      "name": "spark.executor.resource.{resourceName}.amount",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "Amount of a particular resource type to use per executor process. If this is used, you must also specify the spark.executor.resource.{resourceName}.discoveryScript for the executor to find the resource on startup."
    },
    {
      "name": "spark.executor.resource.{resourceName}.discoveryScript",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "A script for the executor to run to discover a particular resource type. This should write to STDOUT a JSON string in the format of the ResourceInformation class. This has a name and an array of addresses."
    },
    {
      "name": "spark.executor.resource.{resourceName}.vendor",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Vendor of the resources to use for the executors. This option is currently only supported on Kubernetes and is actually both the vendor and domain following the Kubernetes device plugin naming convention. (e.g. For GPUs on Kubernetes this config would be set to nvidia.com or amd.com)"
    },
    {
      "name": "spark.extraListeners",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A comma-separated list of classes that implement SparkListener; when initializing SparkContext, instances of these classes will be created and registered with Spark\u0027s listener bus. If a class has a single-argument constructor that accepts a SparkConf, that constructor will be called; otherwise, a zero-argument constructor will be called. If no valid constructor can be found, the SparkContext creation will fail with an exception."
    },
    {
      "name": "spark.local.dir",
      "type": "java.lang.String",
      "defaultValue": "/tmp",
      "description": "Directory to use for \"scratch\" space in Spark, including map output files and RDDs that get stored on disk. This should be on a fast, local disk in your system. It can also be a comma-separated list of multiple directories on different disks. Note: This will be overridden by SPARK_LOCAL_DIRS (Standalone), MESOS_SANDBOX (Mesos) or LOCAL_DIRS (YARN) environment variables set by the cluster manager."
    },
    {
      "name": "spark.logConf",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Logs the effective SparkConf as INFO when a SparkContext is started."
    },
    {
      "name": "spark.master",
      "type": "java.lang.String",
      "defaultValue": "k8s://https://kubernetes.default.svc",
      "description": "The cluster manager to connect to. See the list of <a href=\"https://spark.apache.org/docs/3.4.1/submitting-applications.html#master-urls\">allowed master URL's</a>."
    },
    {
      "name": "spark.submit.deployMode",
      "type": "java.lang.String",
      "defaultValue": "client",
      "description": "The deploy mode of Spark driver program, either \"client\" or \"cluster\", Which means to launch driver program locally (\"client\") or remotely (\"cluster\") on one of the nodes inside the cluster."
    },
    {
      "name": "spark.log.callerContext",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Application information that will be written into Yarn RM log/HDFS audit log when running on Yarn/HDFS. Its length depends on the Hadoop configuration hadoop.caller.context.max.size. It should be concise, and typically can have up to 50 characters."
    },
    {
      "name": "spark.driver.supervise",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, restarts the driver automatically if it fails with a non-zero exit status. Only has effect in Spark standalone mode or Mesos cluster deploy mode."
    },
    {
      "name": "spark.driver.log.dfsDir",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Base directory in which Spark driver logs are synced, if spark.driver.log.persistToDfs.enabled is true. Within this base directory, each application logs the driver logs to an application specific file. Users may want to set this to a unified location like an HDFS directory so driver log files can be persisted for later usage. This directory should allow any Spark user to read/write files and the Spark History Server user to delete files. Additionally, older logs from this directory are cleaned by the Spark History Server if spark.history.fs.driverlog.cleaner.enabled is true and, if they are older than max age configured by setting spark.history.fs.driverlog.cleaner.maxAge."
    },
    {
      "name": "spark.driver.log.persistToDfs.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, spark application running in client mode will write driver logs to a persistent storage, configured in spark.driver.log.dfsDir. If spark.driver.log.dfsDir is not configured, driver logs will not be persisted. Additionally, enable the cleaner by setting spark.history.fs.driverlog.cleaner.enabled to true in Spark History Server."
    },
    {
      "name": "spark.driver.log.layout",
      "type": "java.lang.String",
      "defaultValue": "%d{yy/MM/dd HH:mm:ss.SSS} %t %p %c{1}: %m%n%ex",
      "description": "The layout for the driver logs that are synced to spark.driver.log.dfsDir. If this is not configured, it uses the layout for the first appender defined in log4j2.properties. If that is also not configured, driver logs use the default layout."
    },
    {
      "name": "spark.driver.log.allowErasureCoding",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to allow driver logs to use erasure coding. On HDFS, erasure coded files will not update as quickly as regular replicated files, so they make take longer to reflect changes written by the application. Note that even if this is true, Spark will still not force the file to use erasure coding, it will simply use file system defaults."
    },
    {
      "name": "spark.decommission.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When decommission enabled, Spark will try its best to shut down the executor gracefully. Spark will try to migrate all the RDD blocks (controlled by spark.storage.decommission.rddBlocks.enabled) and shuffle blocks (controlled by spark.storage.decommission.shuffleBlocks.enabled) from the decommissioning executor to a remote executor when spark.storage.decommission.enabled is enabled. With decommission enabled, Spark will also decommission an executor instead of killing when spark.dynamicAllocation.enabled enabled."
    },
    {
      "name": "spark.executor.decommission.killInterval",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Duration after which a decommissioned executor will be killed forcefully by an outside (e.g. non-spark) service."
    },
    {
      "name": "spark.executor.decommission.forceKillTimeout",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Duration after which a Spark will force a decommissioning executor to exit. This should be set to a high value in most situations as low values will prevent block migrations from having enough time to complete."
    },
    {
      "name": "spark.executor.decommission.signal",
      "type": "java.lang.String",
      "defaultValue": "PWR",
      "description": "The signal that used to trigger the executor to start decommission."
    },
    {
      "name": "spark.driver.extraClassPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Extra classpath entries to prepend to the classpath of the driver. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-class-path command line option or in your default properties file."
    },
    {
      "name": "spark.driver.defaultJavaOptions",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A string of default JVM options to prepend to spark.driver.extraJavaOptions. This is intended to be set by administrators. For instance, GC settings or other logging. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.driver.memory in the cluster mode and through the --driver-memory command line option in the client mode. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-java-options command line option or in your default properties file."
    },
    {
      "name": "spark.driver.extraJavaOptions",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A string of extra JVM options to pass to the driver. This is intended to be set by users. For instance, GC settings or other logging. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.driver.memory in the cluster mode and through the --driver-memory command line option in the client mode. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-java-options command line option or in your default properties file. spark.driver.defaultJavaOptions will be prepended to this configuration."
    },
    {
      "name": "spark.driver.extraLibraryPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Set a special library path to use when launching the driver JVM. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-library-path command line option or in your default properties file."
    },
    {
      "name": "spark.driver.userClassPathFirst",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Experimental) Whether to give user-added jars precedence over Spark\u0027s own jars when loading classes in the driver. This feature can be used to mitigate conflicts between Spark\u0027s dependencies and user dependencies. It is currently an experimental feature. This is used in cluster mode only."
    },
    {
      "name": "spark.executor.extraClassPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Extra classpath entries to prepend to the classpath of executors. This exists primarily for backwards-compatibility with older versions of Spark. Users typically should not need to set this option."
    },
    {
      "name": "spark.executor.defaultJavaOptions",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A string of default JVM options to prepend to spark.executor.extraJavaOptions. This is intended to be set by administrators. For instance, GC settings or other logging. Note that it is illegal to set Spark properties or maximum heap size (-Xmx) settings with this option. Spark properties should be set using a SparkConf object or the spark-defaults.conf file used with the spark-submit script. Maximum heap size settings can be set with spark.executor.memory. The following symbols, if present will be interpolated: will be replaced by application ID and will be replaced by executor ID. For example, to enable verbose gc logging to a file named for the executor ID of the app in /tmp, pass a \u0027value\u0027 of: -verbose:gc -Xloggc:/tmp/-.gc"
    },
    {
      "name": "spark.executor.extraJavaOptions",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A string of extra JVM options to pass to executors. This is intended to be set by users. For instance, GC settings or other logging. Note that it is illegal to set Spark properties or maximum heap size (-Xmx) settings with this option. Spark properties should be set using a SparkConf object or the spark-defaults.conf file used with the spark-submit script. Maximum heap size settings can be set with spark.executor.memory. The following symbols, if present will be interpolated: will be replaced by application ID and will be replaced by executor ID. For example, to enable verbose gc logging to a file named for the executor ID of the app in /tmp, pass a \u0027value\u0027 of: -verbose:gc -Xloggc:/tmp/-.gc spark.executor.defaultJavaOptions will be prepended to this configuration."
    },
    {
      "name": "spark.executor.extraLibraryPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Set a special library path to use when launching executor JVM\u0027s."
    },
    {
      "name": "spark.executor.logs.rolling.maxRetainedFiles",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Sets the number of latest rolling log files that are going to be retained by the system. Older log files will be deleted. Disabled by default."
    },
    {
      "name": "spark.executor.logs.rolling.enableCompression",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enable executor log compression. If it is enabled, the rolled executor logs will be compressed. Disabled by default."
    },
    {
      "name": "spark.executor.logs.rolling.maxSize",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Set the max size of the file in bytes by which the executor logs will be rolled over. Rolling is disabled by default. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs."
    },
    {
      "name": "spark.executor.logs.rolling.strategy",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Set the strategy of rolling of executor logs. By default it is disabled. It can be set to \"time\" (time-based rolling) or \"size\" (size-based rolling). For \"time\", use spark.executor.logs.rolling.time.interval to set the rolling interval. For \"size\", use spark.executor.logs.rolling.maxSize to set the maximum file size for rolling."
    },
    {
      "name": "spark.executor.logs.rolling.time.interval",
      "type": "java.lang.String",
      "defaultValue": "daily",
      "description": "Set the time interval by which the executor logs will be rolled over. Rolling is disabled by default. Valid values are daily, hourly, minutely or any interval in seconds. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs."
    },
    {
      "name": "spark.executor.userClassPathFirst",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Experimental) Same functionality as spark.driver.userClassPathFirst, but applied to executor instances."
    },
    {
      "name": "spark.executorEnv.[EnvironmentVariableName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the environment variable specified by EnvironmentVariableName to the Executor process. The user can specify multiple of these to set multiple environment variables."
    },
    {
      "name": "spark.redaction.regex",
      "type": "java.lang.String",
      "defaultValue": "(?i)secret|password|token|access[.]key",
      "description": "Regex to decide which Spark configuration properties and environment variables in driver and executor environments contain sensitive information. When this regex matches a property key or value, the value is redacted from the environment UI and various logs like YARN and event logs."
    },
    {
      "name": "spark.redaction.string.regex",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Regex to decide which parts of strings produced by Spark contain sensitive information. When this regex matches a string part, that string part is replaced by a dummy value. This is currently used to redact the output of SQL explain commands."
    },
    {
      "name": "spark.python.profile",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enable profiling in Python worker, the profile result will show up by sc.show_profiles(), or it will be displayed before the driver exits. It also can be dumped into disk by sc.dump_profiles(path). If some of the profile results had been displayed manually, they will not be displayed automatically before driver exiting. By default the pyspark.profiler.BasicProfiler will be used, but this can be overridden by passing a profiler class in as a parameter to the SparkContext constructor."
    },
    {
      "name": "spark.python.profile.dump",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The directory which is used to dump the profile result before driver exiting. The results will be dumped as separated file for each RDD. They can be loaded by pstats.Stats(). If this is specified, the profile result will not be displayed automatically."
    },
    {
      "name": "spark.python.worker.memory",
      "type": "java.lang.String",
      "defaultValue": "512m",
      "description": "Amount of memory to use per python worker process during aggregation, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g). If the memory used during aggregation goes above this amount, it will spill the data into disks."
    },
    {
      "name": "spark.python.worker.reuse",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Reuse Python worker or not. If yes, it will use a fixed number of Python workers, does not need to fork() a Python process for every task. It will be very useful if there is a large broadcast, then the broadcast will not need to be transferred from JVM to Python worker for every task."
    },
    {
      "name": "spark.files",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of files to be placed in the working directory of each executor. Globs are allowed."
    },
    {
      "name": "spark.submit.pyFiles",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of .zip, .egg, or .py files to place on the PYTHONPATH for Python apps. Globs are allowed."
    },
    {
      "name": "spark.jars",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of jars to include on the driver and executor classpaths. Globs are allowed."
    },
    {
      "name": "spark.jars.packages",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths. The coordinates should be groupId:artifactId:version. If spark.jars.ivySettings is given artifacts will be resolved according to the configuration in the file, otherwise artifacts will be searched for in the local maven repo, then maven central and finally any additional remote repositories given by the command-line option --repositories. For more details, see Advanced Dependency Management."
    },
    {
      "name": "spark.jars.excludes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of groupId:artifactId, to exclude while resolving the dependencies provided in spark.jars.packages to avoid dependency conflicts."
    },
    {
      "name": "spark.jars.ivy",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to specify the Ivy user directory, used for the local Ivy cache and package files from spark.jars.packages. This will override the Ivy property ivy.default.ivy.user.dir which defaults to ~/.ivy2."
    },
    {
      "name": "spark.jars.ivySettings",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to an Ivy settings file to customize resolution of jars specified using spark.jars.packages instead of the built-in defaults, such as maven central. Additional repositories given by the command-line option --repositories or spark.jars.repositories will also be included. Useful for allowing Spark to resolve artifacts from behind a firewall e.g. via an in-house artifact server like Artifactory. Details on the settings file format can be found at Settings Files. Only paths with file:// scheme are supported. Paths without a scheme are assumed to have a file:// scheme. When running in YARN cluster mode, this file will also be localized to the remote driver for dependency resolution within SparkContext#addJar"
    },
    {
      "name": "spark.jars.repositories",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of additional remote repositories to search for the maven coordinates given with --packages or spark.jars.packages."
    },
    {
      "name": "spark.archives",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated list of archives to be extracted into the working directory of each executor. .jar, .tar.gz, .tgz and .zip are supported. You can specify the directory name to unpack via adding # after the file name to unpack, for example, file.zip#directory. This configuration is experimental."
    },
    {
      "name": "spark.pyspark.driver.python",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Python binary executable to use for PySpark in driver. (default is spark.pyspark.python)"
    },
    {
      "name": "spark.pyspark.python",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Python binary executable to use for PySpark in both driver and executors."
    },
    {
      "name": "spark.reducer.maxSizeInFlight",
      "type": "java.lang.String",
      "defaultValue": "48m",
      "description": "Maximum size of map outputs to fetch simultaneously from each reduce task, in MiB unless otherwise specified. Since each output requires us to create a buffer to receive it, this represents a fixed memory overhead per reduce task, so keep it small unless you have a large amount of memory."
    },
    {
      "name": "spark.reducer.maxReqsInFlight",
      "type": "java.lang.String",
      "defaultValue": "Int.MaxValue",
      "description": "This configuration limits the number of remote requests to fetch blocks at any given point. When the number of hosts in the cluster increase, it might lead to very large number of inbound connections to one or more nodes, causing the workers to fail under load. By allowing it to limit the number of fetch requests, this scenario can be mitigated."
    },
    {
      "name": "spark.reducer.maxBlocksInFlightPerAddress",
      "type": "java.lang.String",
      "defaultValue": "Int.MaxValue",
      "description": "This configuration limits the number of remote blocks being fetched per reduce task from a given host port. When a large number of blocks are being requested from a given address in a single fetch or simultaneously, this could crash the serving executor or Node Manager. This is especially useful to reduce the load on the Node Manager when external shuffle is enabled. You can mitigate this issue by setting it to a lower value."
    },
    {
      "name": "spark.shuffle.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to compress map output files. Generally a good idea. Compression will use spark.io.compression.codec."
    },
    {
      "name": "spark.shuffle.file.buffer",
      "type": "java.lang.String",
      "defaultValue": "32k",
      "description": "Size of the in-memory buffer for each shuffle file output stream, in KiB unless otherwise specified. These buffers reduce the number of disk seeks and system calls made in creating intermediate shuffle files."
    },
    {
      "name": "spark.shuffle.unsafe.file.output.buffer",
      "type": "java.lang.String",
      "defaultValue": "32k",
      "description": "The file system for this buffer size after each partition is written in unsafe shuffle writer. In KiB unless otherwise specified."
    },
    {
      "name": "spark.shuffle.spill.diskWriteBufferSize",
      "type": "java.lang.String",
      "defaultValue": "1024 * 1024",
      "description": "The buffer size, in bytes, to use when writing the sorted records to an on-disk file."
    },
    {
      "name": "spark.shuffle.io.maxRetries",
      "type": "java.lang.Integer",
      "defaultValue": "3",
      "description": "(Netty only) Fetches that fail due to IO-related exceptions are automatically retried if this is set to a non-zero value. This retry logic helps stabilize large shuffles in the face of long GC pauses or transient network connectivity issues."
    },
    {
      "name": "spark.shuffle.io.numConnectionsPerPeer",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "(Netty only) Connections between hosts are reused in order to reduce connection buildup for large clusters. For clusters with many hard disks and few hosts, this may result in insufficient concurrency to saturate all disks, and so users may consider increasing this value."
    },
    {
      "name": "spark.shuffle.io.preferDirectBufs",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "(Netty only) Off-heap buffers are used to reduce garbage collection during shuffle and cache block transfer. For environments where off-heap memory is tightly limited, users may wish to turn this off to force all allocations from Netty to be on-heap."
    },
    {
      "name": "spark.shuffle.io.retryWait",
      "type": "java.lang.String",
      "defaultValue": "5s",
      "description": "(Netty only) How long to wait between retries of fetches. The maximum delay caused by retrying is 15 seconds by default, calculated as maxRetries * retryWait."
    },
    {
      "name": "spark.shuffle.io.backLog",
      "type": "java.lang.Integer",
      "defaultValue": "-1",
      "description": "Length of the accept queue for the shuffle service. For large applications, this value may need to be increased, so that incoming connections are not dropped if the service cannot keep up with a large number of connections arriving in a short period of time. This needs to be configured wherever the shuffle service itself is running, which may be outside of the application (see spark.shuffle.service.enabled option below). If set below 1, will fallback to OS default defined by Netty\u0027s io.netty.util.NetUtil#SOMAXCONN."
    },
    {
      "name": "spark.shuffle.io.connectionTimeout",
      "type": "java.lang.String",
      "defaultValue": "value of spark.network.timeout",
      "description": "Timeout for the established connections between shuffle servers and clients to be marked as idled and closed if there are still outstanding fetch requests but no traffic no the channel for at least `connectionTimeout`."
    },
    {
      "name": "spark.shuffle.service.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables the external shuffle service. This service preserves the shuffle files written by executors e.g. so that executors can be safely removed, or so that shuffle fetches can continue in the event of executor failure. The external shuffle service must be set up in order to enable it. See dynamic allocation configuration and setup documentation for more information."
    },
    {
      "name": "spark.shuffle.service.port",
      "type": "java.lang.Integer",
      "defaultValue": "7337",
      "description": "Port on which the external shuffle service will run."
    },
    {
      "name": "spark.shuffle.service.name",
      "type": "java.lang.String",
      "defaultValue": "spark_shuffle",
      "description": "The configured name of the Spark shuffle service the client should communicate with. This must match the name used to configure the Shuffle within the YARN NodeManager configuration (yarn.nodemanager.aux-services). Only takes effect when spark.shuffle.service.enabled is set to true."
    },
    {
      "name": "spark.shuffle.service.index.cache.size",
      "type": "java.lang.String",
      "defaultValue": "100m",
      "description": "Cache entries limited to the specified memory footprint, in bytes unless otherwise specified."
    },
    {
      "name": "spark.shuffle.service.removeShuffle",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to use the ExternalShuffleService for deleting shuffle blocks for deallocated executors when the shuffle is no longer needed. Without this enabled, shuffle data on executors that are deallocated will remain on disk until the application ends."
    },
    {
      "name": "spark.shuffle.maxChunksBeingTransferred",
      "type": "java.lang.String",
      "defaultValue": "Long.MAX_VALUE",
      "description": "The max number of chunks allowed to be transferred at the same time on shuffle service. Note that new incoming connections will be closed when the max number is hit. The client will retry according to the shuffle retry configs (see spark.shuffle.io.maxRetries and spark.shuffle.io.retryWait), if those limits are reached the task will fail with fetch failure."
    },
    {
      "name": "spark.shuffle.sort.bypassMergeThreshold",
      "type": "java.lang.Integer",
      "defaultValue": "200",
      "description": "(Advanced) In the sort-based shuffle manager, avoid merge-sorting data if there is no map-side aggregation and there are at most this many reduce partitions."
    },
    {
      "name": "spark.shuffle.sort.io.plugin.class",
      "type": "java.lang.String",
      "defaultValue": "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO",
      "description": "Name of the class to use for shuffle IO."
    },
    {
      "name": "spark.shuffle.spill.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to compress data spilled during shuffles. Compression will use spark.io.compression.codec."
    },
    {
      "name": "spark.shuffle.accurateBlockThreshold",
      "type": "java.lang.String",
      "defaultValue": "100 * 1024 * 1024",
      "description": "Threshold in bytes above which the size of shuffle blocks in HighlyCompressedMapStatus is accurately recorded. This helps to prevent OOM by avoiding underestimating shuffle block size when fetch shuffle blocks."
    },
    {
      "name": "spark.shuffle.registration.timeout",
      "type": "java.lang.Integer",
      "defaultValue": "5000",
      "description": "Timeout in milliseconds for registration to the external shuffle service."
    },
    {
      "name": "spark.shuffle.registration.maxAttempts",
      "type": "java.lang.Integer",
      "defaultValue": "3",
      "description": "When we fail to register to the external shuffle service, we will retry for maxAttempts times."
    },
    {
      "name": "spark.shuffle.reduceLocality.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to compute locality preferences for reduce tasks."
    },
    {
      "name": "spark.shuffle.mapOutput.minSizeForBroadcast",
      "type": "java.lang.String",
      "defaultValue": "512k",
      "description": "The size at which we use Broadcast to send the map output statuses to the executors."
    },
    {
      "name": "spark.shuffle.detectCorrupt",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to detect any corruption in fetched blocks."
    },
    {
      "name": "spark.shuffle.detectCorrupt.useExtraMemory",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If enabled, part of a compressed/encrypted stream will be de-compressed/de-crypted by using extra memory to detect early corruption. Any IOException thrown will cause the task to be retried once and if it fails again with same exception, then FetchFailedException will be thrown to retry previous stage."
    },
    {
      "name": "spark.shuffle.useOldFetchProtocol",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to use the old protocol while doing the shuffle block fetching. It is only enabled while we need the compatibility in the scenario of new Spark version job fetching shuffle blocks from old version external shuffle service."
    },
    {
      "name": "spark.shuffle.readHostLocalDisk",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If enabled (and spark.shuffle.useOldFetchProtocol is disabled, shuffle blocks requested from those block managers which are running on the same host are read from the disk directly instead of being fetched as remote blocks over the network."
    },
    {
      "name": "spark.files.io.connectionTimeout",
      "type": "java.lang.String",
      "defaultValue": "value of spark.network.timeout",
      "description": "Timeout for the established connections for fetching files in Spark RPC environments to be marked as idled and closed if there are still outstanding files being downloaded but no traffic no the channel for at least `connectionTimeout`."
    },
    {
      "name": "spark.shuffle.checksum.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to calculate the checksum of shuffle data. If enabled, Spark will calculate the checksum values for each partition data within the map output file and store the values in a checksum file on the disk. When there\u0027s shuffle data corruption detected, Spark will try to diagnose the cause (e.g., network issue, disk issue, etc.) of the corruption by using the checksum file."
    },
    {
      "name": "spark.shuffle.checksum.algorithm",
      "type": "java.lang.String",
      "defaultValue": "ADLER32",
      "description": "The algorithm is used to calculate the shuffle checksum. Currently, it only supports built-in algorithms of JDK, e.g., ADLER32, CRC32."
    },
    {
      "name": "spark.shuffle.service.fetch.rdd.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to use the ExternalShuffleService for fetching disk persisted RDD blocks. In case of dynamic allocation if this feature is enabled executors having only disk persisted blocks are considered idle after spark.dynamicAllocation.executorIdleTimeout and will be released accordingly."
    },
    {
      "name": "spark.shuffle.service.db.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to use db in ExternalShuffleService. Note that this only affects standalone mode."
    },
    {
      "name": "spark.shuffle.service.db.backend",
      "type": "java.lang.String",
      "defaultValue": "LEVELDB",
      "description": "Specifies a disk-based store used in shuffle service local db. Setting as LEVELDB or ROCKSDB."
    },
    {
      "name": "spark.eventLog.logBlockUpdates.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to log events for every block update, if spark.eventLog.enabled is true. *Warning*: This will increase the size of the event log considerably."
    },
    {
      "name": "spark.eventLog.longForm.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, use the long form of call sites in the event log. Otherwise use the short form."
    },
    {
      "name": "spark.eventLog.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to compress logged events, if spark.eventLog.enabled is true."
    },
    {
      "name": "spark.eventLog.compression.codec",
      "type": "java.lang.String",
      "defaultValue": "zstd",
      "description": "The codec to compress logged events. By default, Spark provides four codecs: lz4, lzf, snappy, and zstd. You can also use fully qualified class names to specify the codec, e.g. org.apache.spark.io.LZ4CompressionCodec, org.apache.spark.io.LZFCompressionCodec, org.apache.spark.io.SnappyCompressionCodec, and org.apache.spark.io.ZStdCompressionCodec."
    },
    {
      "name": "spark.eventLog.erasureCoding.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to allow event logs to use erasure coding, or turn erasure coding off, regardless of filesystem defaults. On HDFS, erasure coded files will not update as quickly as regular replicated files, so the application updates will take longer to appear in the History Server. Note that even if this is true, Spark will still not force the file to use erasure coding, it will simply use filesystem defaults."
    },
    {
      "name": "spark.eventLog.dir",
      "type": "java.lang.String",
      "defaultValue": "file:///tmp/spark-events",
      "description": "Base directory in which Spark events are logged, if spark.eventLog.enabled is true. Within this base directory, Spark creates a sub-directory for each application, and logs the events specific to the application in this directory. Users may want to set this to a unified location like an HDFS directory so history files can be read by the history server."
    },
    {
      "name": "spark.eventLog.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to log Spark events, useful for reconstructing the Web UI after the application has finished."
    },
    {
      "name": "spark.eventLog.overwrite",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to overwrite any existing files."
    },
    {
      "name": "spark.eventLog.buffer.kb",
      "type": "java.lang.String",
      "defaultValue": "100k",
      "description": "Buffer size to use when writing to output streams, in KiB unless otherwise specified."
    },
    {
      "name": "spark.eventLog.rolling.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether rolling over event log files is enabled. If set to true, it cuts down each event log file to the configured size."
    },
    {
      "name": "spark.eventLog.rolling.maxFileSize",
      "type": "java.lang.String",
      "defaultValue": "128m",
      "description": "When spark.eventLog.rolling.enabled\u003dtrue, specifies the max size of event log file before it\u0027s rolled over."
    },
    {
      "name": "spark.ui.dagGraph.retainedRootRDDs",
      "type": "java.lang.String",
      "defaultValue": "Int.MaxValue",
      "description": "How many DAG graph nodes the Spark UI and status APIs remember before garbage collecting."
    },
    {
      "name": "spark.ui.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to run the web UI for the Spark application."
    },
    {
      "name": "spark.ui.store.path",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Local directory where to cache application information for live UI. By default this is not set, meaning all application information will be kept in memory."
    },
    {
      "name": "spark.ui.killEnabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Allows jobs and stages to be killed from the web UI."
    },
    {
      "name": "spark.ui.liveUpdate.period",
      "type": "java.lang.String",
      "defaultValue": "100ms",
      "description": "How often to update live entities. -1 means \"never update\" when replaying applications, meaning only the last write will happen. For live applications, this avoids a few operations that we can live without when rapidly processing incoming task events."
    },
    {
      "name": "spark.ui.liveUpdate.minFlushPeriod",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "Minimum time elapsed before stale UI data is flushed. This avoids UI staleness when incoming task events are not fired frequently."
    },
    {
      "name": "spark.ui.port",
      "type": "java.lang.Integer",
      "defaultValue": "4040",
      "description": "Port for your application\u0027s dashboard, which shows memory and workload data."
    },
    {
      "name": "spark.ui.retainedJobs",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "How many jobs the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
    },
    {
      "name": "spark.ui.retainedStages",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "How many stages the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
    },
    {
      "name": "spark.ui.retainedTasks",
      "type": "java.lang.Integer",
      "defaultValue": "100000",
      "description": "How many tasks in one stage the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
    },
    {
      "name": "spark.ui.reverseProxy",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enable running Spark Master as reverse proxy for worker and application UIs. In this mode, Spark master will reverse proxy the worker and application UIs to enable access without requiring direct access to their hosts. Use it with caution, as worker and application UI will not be accessible directly, you will only be able to access them through spark master/proxy public URL. This setting affects all the workers and application UIs running in the cluster and must be set on all the workers, drivers and masters."
    },
    {
      "name": "spark.ui.reverseProxyUrl",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "If the Spark UI should be served through another front-end reverse proxy, this is the URL for accessing the Spark master UI through that reverse proxy. This is useful when running proxy for authentication e.g. an OAuth proxy. The URL may contain a path prefix, like http://mydomain.com/path/to/spark/, allowing you to serve the UI for multiple Spark clusters and other web applications through the same virtual host and port. Normally, this should be an absolute URL including scheme (http/https), host and port. It is possible to specify a relative URL starting with \"/\" here. In this case, all URLs generated by the Spark UI and Spark REST APIs will be server-relative links -- this will still work, as the entire Spark UI is served through the same host and port. The setting affects link generation in the Spark UI, but the front-end reverse proxy is responsible for stripping a path prefix before forwarding the request, rewriting redirects which point directly to the Spark master, redirecting access from http://mydomain.com/path/to/spark to http://mydomain.com/path/to/spark/ (trailing slash after path prefix); otherwise relative links on the master page do not work correctly. This setting affects all the workers and application UIs running in the cluster and must be set identically on all the workers, drivers and masters. In is only effective when spark.ui.reverseProxy is turned on. This setting is not needed when the Spark master web UI is directly reachable. Note that the value of the setting can\u0027t contain the keyword `proxy` or `history` after split by \"/\". Spark UI relies on both keywords for getting REST API endpoints from URIs."
    },
    {
      "name": "spark.ui.proxyRedirectUri",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Where to address redirects when Spark is running behind a proxy. This will make Spark modify redirect responses so they point to the proxy server, instead of the Spark UI\u0027s own address. This should be only the address of the server, without any prefix paths for the application; the prefix should be set either by the proxy server itself (by adding the X-Forwarded-Context request header), or by setting the proxy base in the Spark app\u0027s configuration."
    },
    {
      "name": "spark.ui.showConsoleProgress",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Show the progress bar in the console. The progress bar shows the progress of stages that run for longer than 500ms. If multiple stages run at the same time, multiple progress bars will be displayed on the same line. Note: In shell environment, the default value of spark.ui.showConsoleProgress is true."
    },
    {
      "name": "spark.ui.custom.executor.log.url",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specifies custom spark executor log URL for supporting external log service instead of using cluster managers\u0027 application log URLs in Spark UI. Spark will support some path variables via patterns which can vary on cluster manager. Please check the documentation for your cluster manager to see which patterns are supported, if any. Please note that this configuration also replaces original log urls in event log, which will be also effective when accessing the application on history server. The new log urls must be permanent, otherwise you might have dead link for executor log urls. For now, only YARN mode supports this configuration"
    },
    {
      "name": "spark.worker.ui.retainedExecutors",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "How many finished executors the Spark UI and status APIs remember before garbage collecting."
    },
    {
      "name": "spark.worker.ui.retainedDrivers",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "How many finished drivers the Spark UI and status APIs remember before garbage collecting."
    },
    {
      "name": "spark.ui.retainedDeadExecutors",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "How many dead executors the Spark UI and status APIs remember before garbage collecting."
    },
    {
      "name": "spark.ui.filters",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Comma separated list of filter class names to apply to the Spark Web UI. The filter should be a standard javax servlet Filter. Filter parameters can also be specified in the configuration, by setting config entries of the form spark.\u003cclass name of filter\u003e.param.\u003cparam name\u003e\u003d\u003cvalue\u003e For example: spark.ui.filters\u003dcom.test.filter1 spark.com.test.filter1.param.name1\u003dfoo spark.com.test.filter1.param.name2\u003dbar"
    },
    {
      "name": "spark.ui.requestHeaderSize",
      "type": "java.lang.String",
      "defaultValue": "8k",
      "description": "The maximum allowed size for a HTTP request header, in bytes unless otherwise specified. This setting applies for the Spark History Server too."
    },
    {
      "name": "spark.ui.timelineEnabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to display event timeline data on UI pages."
    },
    {
      "name": "spark.ui.timeline.executors.maximum",
      "type": "java.lang.Integer",
      "defaultValue": "250",
      "description": "The maximum number of executors shown in the event timeline."
    },
    {
      "name": "spark.ui.timeline.jobs.maximum",
      "type": "java.lang.Integer",
      "defaultValue": "500",
      "description": "The maximum number of jobs shown in the event timeline."
    },
    {
      "name": "spark.ui.timeline.stages.maximum",
      "type": "java.lang.Integer",
      "defaultValue": "500",
      "description": "The maximum number of stages shown in the event timeline."
    },
    {
      "name": "spark.ui.timeline.tasks.maximum",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "The maximum number of tasks shown in the event timeline."
    },
    {
      "name": "spark.appStatusStore.diskStoreDir",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Local directory where to store diagnostic information of SQL executions. This configuration is only for live UI."
    },
    {
      "name": "spark.broadcast.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to compress broadcast variables before sending them. Generally a good idea. Compression will use spark.io.compression.codec."
    },
    {
      "name": "spark.checkpoint.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to compress RDD checkpoints. Generally a good idea. Compression will use spark.io.compression.codec."
    },
    {
      "name": "spark.io.compression.codec",
      "type": "java.lang.String",
      "defaultValue": "lz4",
      "description": "The codec used to compress internal data such as RDD partitions, event log, broadcast variables and shuffle outputs. By default, Spark provides four codecs: lz4, lzf, snappy, and zstd. You can also use fully qualified class names to specify the codec, e.g. org.apache.spark.io.LZ4CompressionCodec, org.apache.spark.io.LZFCompressionCodec, org.apache.spark.io.SnappyCompressionCodec, and org.apache.spark.io.ZStdCompressionCodec."
    },
    {
      "name": "spark.io.compression.lz4.blockSize",
      "type": "java.lang.String",
      "defaultValue": "32k",
      "description": "Block size used in LZ4 compression, in the case when LZ4 compression codec is used. Lowering this block size will also lower shuffle memory usage when LZ4 is used. Default unit is bytes, unless otherwise specified. This configuration only applies to `spark.io.compression.codec`."
    },
    {
      "name": "spark.io.compression.snappy.blockSize",
      "type": "java.lang.String",
      "defaultValue": "32k",
      "description": "Block size in Snappy compression, in the case when Snappy compression codec is used. Lowering this block size will also lower shuffle memory usage when Snappy is used. Default unit is bytes, unless otherwise specified. This configuration only applies to `spark.io.compression.codec`."
    },
    {
      "name": "spark.io.compression.zstd.level",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Compression level for Zstd compression codec. Increasing the compression level will result in better compression at the expense of more CPU and memory. This configuration only applies to `spark.io.compression.codec`."
    },
    {
      "name": "spark.io.compression.zstd.bufferSize",
      "type": "java.lang.String",
      "defaultValue": "32k",
      "description": "Buffer size in bytes used in Zstd compression, in the case when Zstd compression codec is used. Lowering this size will lower the shuffle memory usage when Zstd is used, but it might increase the compression cost because of excessive JNI call overhead. This configuration only applies to `spark.io.compression.codec`."
    },
    {
      "name": "spark.kryo.classesToRegister",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "If you use Kryo serialization, give a comma-separated list of custom class names to register with Kryo. See the tuning guide for more details."
    },
    {
      "name": "spark.kryo.referenceTracking",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to track references to the same object when serializing data with Kryo, which is necessary if your object graphs have loops and useful for efficiency if they contain multiple copies of the same object. Can be disabled to improve performance if you know this is not the case."
    },
    {
      "name": "spark.kryo.registrationRequired",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to require registration with Kryo. If set to \u0027true\u0027, Kryo will throw an exception if an unregistered class is serialized. If set to false (the default), Kryo will write unregistered class names along with each object. Writing class names can cause significant performance overhead, so enabling this option can enforce strictly that a user has not omitted classes from registration."
    },
    {
      "name": "spark.kryo.registrator",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "If you use Kryo serialization, give a comma-separated list of classes that register your custom classes with Kryo. This property is useful if you need to register your classes in a custom way, e.g. to specify a custom field serializer. Otherwise spark.kryo.classesToRegister is simpler. It should be set to classes that extend KryoRegistrator. See the tuning guide for more details."
    },
    {
      "name": "spark.kryo.unsafe",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to use unsafe based Kryo serializer. Can be substantially faster by using Unsafe Based IO."
    },
    {
      "name": "spark.kryoserializer.buffer.max",
      "type": "java.lang.String",
      "defaultValue": "64m",
      "description": "Maximum allowable size of Kryo serialization buffer, in MiB unless otherwise specified. This must be larger than any object you attempt to serialize and must be less than 2048m. Increase this if you get a \"buffer limit exceeded\" exception inside Kryo."
    },
    {
      "name": "spark.kryoserializer.buffer",
      "type": "java.lang.String",
      "defaultValue": "64k",
      "description": "Initial size of Kryo\u0027s serialization buffer, in KiB unless otherwise specified. Note that there will be one buffer per core on each worker. This buffer will grow up to spark.kryoserializer.buffer.max if needed."
    },
    {
      "name": "spark.rdd.compress",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to compress serialized RDD partitions (e.g. for StorageLevel.MEMORY_ONLY_SER in Java and Scala or StorageLevel.MEMORY_ONLY in Python). Can save substantial space at the cost of some extra CPU time. Compression will use spark.io.compression.codec."
    },
    {
      "name": "spark.serializer",
      "type": "java.lang.String",
      "defaultValue": "org.apache.spark.serializer. JavaSerializer",
      "description": "Class to use for serializing objects that will be sent over the network or need to be cached in serialized form. The default of Java serialization works with any Serializable Java object but is quite slow, so we recommend using org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization when speed is necessary. Can be any subclass of org.apache.spark.Serializer."
    },
    {
      "name": "spark.serializer.objectStreamReset",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "When serializing using org.apache.spark.serializer.JavaSerializer, the serializer caches objects to prevent writing redundant data, however that stops garbage collection of those objects. By calling \u0027reset\u0027 you flush that info from the serializer, and allow old objects to be collected. To turn off this periodic reset set it to -1. By default it will reset the serializer every 100 objects."
    },
    {
      "name": "spark.memory.fraction",
      "type": "java.lang.Double",
      "defaultValue": "0.6",
      "description": "Fraction of (heap space - 300MB) used for execution and storage. The lower this is, the more frequently spills and cached data eviction occur. The purpose of this config is to set aside memory for internal metadata, user data structures, and imprecise size estimation in the case of sparse, unusually large records. Leaving this at the default value is recommended. For more detail, including important information about correctly tuning JVM garbage collection when increasing this value, see this description."
    },
    {
      "name": "spark.memory.storageFraction",
      "type": "java.lang.Double",
      "defaultValue": "0.5",
      "description": "Amount of storage memory immune to eviction, expressed as a fraction of the size of the region set aside by spark.memory.fraction. The higher this is, the less working memory may be available to execution and tasks may spill to disk more often. Leaving this at the default value is recommended. For more detail, see this description."
    },
    {
      "name": "spark.memory.offHeap.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, Spark will attempt to use off-heap memory for certain operations. If off-heap memory use is enabled, then spark.memory.offHeap.size must be positive."
    },
    {
      "name": "spark.memory.offHeap.size",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "The absolute amount of memory which can be used for off-heap allocation, in bytes unless otherwise specified. This setting has no impact on heap memory usage, so if your executors\u0027 total memory consumption must fit within some hard limit then be sure to shrink your JVM heap size accordingly. This must be set to a positive value when spark.memory.offHeap.enabled\u003dtrue."
    },
    {
      "name": "spark.storage.unrollMemoryThreshold",
      "type": "java.lang.String",
      "defaultValue": "1024 * 1024",
      "description": "Initial memory to request before unrolling any block."
    },
    {
      "name": "spark.storage.replication.proactive",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables proactive block replication for RDD blocks. Cached RDD block replicas lost due to executor failures are replenished if there are any existing available replicas. This tries to get the replication level of the block to the initial number."
    },
    {
      "name": "spark.storage.localDiskByExecutors.cacheSize",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "The max number of executors for which the local dirs are stored. This size is both applied for the driver and both for the executors side to avoid having an unbounded store. This cache will be used to avoid the network in case of fetching disk persisted RDD blocks or shuffle blocks (when spark.shuffle.readHostLocalDisk is set) from the same host."
    },
    {
      "name": "spark.cleaner.periodicGC.interval",
      "type": "java.lang.String",
      "defaultValue": "30min",
      "description": "Controls how often to trigger a garbage collection. This context cleaner triggers cleanups only when weak references are garbage collected. In long-running applications with large driver JVMs, where there is little memory pressure on the driver, this may happen very occasionally or not at all. Not cleaning at all may lead to executors running out of disk space after a while."
    },
    {
      "name": "spark.cleaner.referenceTracking",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables or disables context cleaning."
    },
    {
      "name": "spark.cleaner.referenceTracking.blocking",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Controls whether the cleaning thread should block on cleanup tasks (other than shuffle, which is controlled by spark.cleaner.referenceTracking.blocking.shuffle Spark property)."
    },
    {
      "name": "spark.cleaner.referenceTracking.blocking.shuffle",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Controls whether the cleaning thread should block on shuffle cleanup tasks."
    },
    {
      "name": "spark.cleaner.referenceTracking.cleanCheckpoints",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Controls whether to clean checkpoint files if the reference is out of scope."
    },
    {
      "name": "spark.broadcast.blockSize",
      "type": "java.lang.String",
      "defaultValue": "4m",
      "description": "Size of each piece of a block for TorrentBroadcastFactory, in KiB unless otherwise specified. Too large a value decreases parallelism during broadcast (makes it slower); however, if it is too small, BlockManager might take a performance hit."
    },
    {
      "name": "spark.broadcast.checksum",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to enable checksum for broadcast. If enabled, broadcasts will include a checksum, which can help detect corrupted blocks, at the cost of computing and sending a little more data. It\u0027s possible to disable it if the network has other mechanisms to guarantee data won\u0027t be corrupted during broadcast."
    },
    {
      "name": "spark.broadcast.UDFCompressionThreshold",
      "type": "java.lang.String",
      "defaultValue": "1 * 1024 * 1024",
      "description": "The threshold at which user-defined functions (UDFs) and Python RDD commands are compressed by broadcast in bytes unless otherwise specified."
    },
    {
      "name": "spark.executor.cores",
      "type": "java.lang.String",
      "defaultValue": "1 in YARN mode, all the available cores on the worker in standalone and Mesos coarse-grained modes.",
      "description": "The number of cores to use on each executor. In standalone and Mesos coarse-grained modes, for more detail, see this description."
    },
    {
      "name": "spark.default.parallelism",
      "type": "java.lang.String",
      "defaultValue": "For distributed shuffle operations like reduceByKey and join, the largest number of partitions in a parent RDD. For operations like parallelize with no parent RDDs, it depends on the cluster manager: Local mode: number of cores on the local machine Mesos fine grained mode: 8 Others: total number of cores on all executor nodes or 2, whichever is larger",
      "description": "Default number of partitions in RDDs returned by transformations like join, reduceByKey, and parallelize when not set by user."
    },
    {
      "name": "spark.executor.heartbeatInterval",
      "type": "java.lang.String",
      "defaultValue": "10s",
      "description": "Interval between each executor\u0027s heartbeats to the driver. Heartbeats let the driver know that the executor is still alive and update it with metrics for in-progress tasks. spark.executor.heartbeatInterval should be significantly less than spark.network.timeout"
    },
    {
      "name": "spark.files.fetchTimeout",
      "type": "java.lang.String",
      "defaultValue": "60s",
      "description": "Communication timeout to use when fetching files added through SparkContext.addFile() from the driver."
    },
    {
      "name": "spark.files.useFetchCache",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If set to true (default), file fetching will use a local cache that is shared by executors that belong to the same application, which can improve task launching performance when running many executors on the same host. If set to false, these caching optimizations will be disabled and all executors will fetch their own copies of files. This optimization may be disabled in order to use Spark local directories that reside on NFS filesystems (see SPARK-6313 for more details)."
    },
    {
      "name": "spark.files.overwrite",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to overwrite any files which exist at the startup. Users can not overwrite the files added by SparkContext.addFile or SparkContext.addJar before even if this option is set true."
    },
    {
      "name": "spark.files.ignoreCorruptFiles",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to ignore corrupt files. If true, the Spark jobs will continue to run when encountering corrupted or non-existing files and contents that have been read will still be returned."
    },
    {
      "name": "spark.files.ignoreMissingFiles",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to ignore missing files. If true, the Spark jobs will continue to run when encountering missing files and the contents that have been read will still be returned."
    },
    {
      "name": "spark.files.maxPartitionBytes",
      "type": "java.lang.String",
      "defaultValue": "134217728 (128 MiB)",
      "description": "The maximum number of bytes to pack into a single partition when reading files."
    },
    {
      "name": "spark.files.openCostInBytes",
      "type": "java.lang.String",
      "defaultValue": "4194304 (4 MiB)",
      "description": "The estimated cost to open a file, measured by the number of bytes could be scanned at the same time. This is used when putting multiple files into a partition. It is better to overestimate, then the partitions with small files will be faster than partitions with bigger files."
    },
    {
      "name": "spark.hadoop.cloneConf",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to true, clones a new Hadoop Configuration object for each task. This option should be enabled to work around Configuration thread-safety issues (see SPARK-2546 for more details). This is disabled by default in order to avoid unexpected performance regressions for jobs that are not affected by these issues."
    },
    {
      "name": "spark.hadoop.validateOutputSpecs",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If set to true, validates the output specification (e.g. checking if the output directory already exists) used in saveAsHadoopFile and other variants. This can be disabled to silence exceptions due to pre-existing output directories. We recommend that users do not disable this except if trying to achieve compatibility with previous versions of Spark. Simply use Hadoop\u0027s FileSystem API to delete output directories by hand. This setting is ignored for jobs generated through Spark Streaming\u0027s StreamingContext, since data may need to be rewritten to pre-existing output directories during checkpoint recovery."
    },
    {
      "name": "spark.storage.memoryMapThreshold",
      "type": "java.lang.String",
      "defaultValue": "2m",
      "description": "Size of a block above which Spark memory maps when reading a block from disk. Default unit is bytes, unless specified otherwise. This prevents Spark from memory mapping very small blocks. In general, memory mapping has high overhead for blocks close to or below the page size of the operating system."
    },
    {
      "name": "spark.storage.decommission.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to decommission the block manager when decommissioning executor."
    },
    {
      "name": "spark.storage.decommission.shuffleBlocks.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to transfer shuffle blocks during block manager decommissioning. Requires a migratable shuffle resolver (like sort based shuffle)."
    },
    {
      "name": "spark.storage.decommission.shuffleBlocks.maxThreads",
      "type": "java.lang.Integer",
      "defaultValue": "8",
      "description": "Maximum number of threads to use in migrating shuffle files."
    },
    {
      "name": "spark.storage.decommission.rddBlocks.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to transfer RDD blocks during block manager decommissioning."
    },
    {
      "name": "spark.storage.decommission.fallbackStorage.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The location for fallback storage during block manager decommissioning. For example, s3a://spark-storage/. In case of empty, fallback storage is disabled. The storage should be managed by TTL because Spark will not clean it up."
    },
    {
      "name": "spark.storage.decommission.fallbackStorage.cleanUp",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, Spark cleans up its fallback storage data during shutting down."
    },
    {
      "name": "spark.storage.decommission.shuffleBlocks.maxDiskSize",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Maximum disk space to use to store shuffle blocks before rejecting remote shuffle blocks. Rejecting remote shuffle blocks means that an executor will not receive any shuffle migrations, and if there are no other executors available for migration then shuffle blocks will be lost unless spark.storage.decommission.fallbackStorage.path is configured."
    },
    {
      "name": "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "The file output committer algorithm version, valid algorithm version number: 1 or 2. Note that 2 may cause a correctness issue like MAPREDUCE-7282."
    },
    {
      "name": "spark.eventLog.logStageExecutorMetrics",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to write per-stage peaks of executor metrics (for each executor) to the event log. Note: The metrics are polled (collected) and sent in the executor heartbeat, and this is always done; this configuration is only to determine if aggregated metric peaks are written to the event log."
    },
    {
      "name": "spark.executor.processTreeMetrics.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to collect process tree metrics (from the /proc filesystem) when collecting executor metrics. Note: The process tree metrics are collected only if the /proc filesystem exists."
    },
    {
      "name": "spark.executor.metrics.pollingInterval",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "How often to collect executor metrics (in milliseconds). If 0, the polling is done on executor heartbeats (thus at the heartbeat interval, specified by spark.executor.heartbeatInterval). If positive, the polling is done at this interval."
    },
    {
      "name": "spark.eventLog.gcMetrics.youngGenerationGarbageCollectors",
      "type": "java.lang.String",
      "defaultValue": "Copy,PS Scavenge,ParNew,G1 Young Generation",
      "description": "Names of supported young generation garbage collector. A name usually is the return of GarbageCollectorMXBean.getName. The built-in young generation garbage collectors are Copy,PS Scavenge,ParNew,G1 Young Generation."
    },
    {
      "name": "spark.eventLog.gcMetrics.oldGenerationGarbageCollectors",
      "type": "java.lang.String",
      "defaultValue": "MarkSweepCompact,PS MarkSweep,ConcurrentMarkSweep,G1 Old Generation",
      "description": "Names of supported old generation garbage collector. A name usually is the return of GarbageCollectorMXBean.getName. The built-in old generation garbage collectors are MarkSweepCompact,PS MarkSweep,ConcurrentMarkSweep,G1 Old Generation."
    },
    {
      "name": "spark.executor.metrics.fileSystemSchemes",
      "type": "java.lang.String",
      "defaultValue": "file,hdfs",
      "description": "The file system schemes to report in executor metrics."
    },
    {
      "name": "spark.rpc.message.maxSize",
      "type": "java.lang.Integer",
      "defaultValue": "128",
      "description": "Maximum message size (in MiB) to allow in \"control plane\" communication; generally only applies to map output size information sent between executors and the driver. Increase this if you are running jobs with many thousands of map and reduce tasks and see messages about the RPC message size."
    },
    {
      "name": "spark.blockManager.port",
      "type": "java.lang.String",
      "defaultValue": "(random)",
      "description": "Port for all block managers to listen on. These exist on both the driver and the executors."
    },
    {
      "name": "spark.driver.blockManager.port",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.blockManager.port)",
      "description": "Driver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors."
    },
    {
      "name": "spark.driver.bindAddress",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.driver.host)",
      "description": "Hostname or IP address where to bind listening sockets. This config overrides the SPARK_LOCAL_IP environment variable (see below). It also allows a different address from the local one to be advertised to executors or external systems. This is useful, for example, when running containers with bridged networking. For this to properly work, the different ports used by the driver (RPC, block manager and UI) need to be forwarded from the container\u0027s host."
    },
    {
      "name": "spark.driver.host",
      "type": "java.lang.String",
      "defaultValue": "(local hostname)",
      "description": "Hostname or IP address for the driver. This is used for communicating with the executors and the standalone Master."
    },
    {
      "name": "spark.driver.port",
      "type": "java.lang.String",
      "defaultValue": "(random)",
      "description": "Port for the driver to listen on. This is used for communicating with the executors and the standalone Master."
    },
    {
      "name": "spark.rpc.io.backLog",
      "type": "java.lang.Integer",
      "defaultValue": "64",
      "description": "Length of the accept queue for the RPC server. For large applications, this value may need to be increased, so that incoming connections are not dropped when a large number of connections arrives in a short period of time."
    },
    {
      "name": "spark.network.timeout",
      "type": "java.lang.String",
      "defaultValue": "120s",
      "description": "Default timeout for all network interactions. This config will be used in place of spark.storage.blockManagerHeartbeatTimeoutMs, spark.shuffle.io.connectionTimeout, spark.rpc.askTimeout or spark.rpc.lookupTimeout if they are not configured."
    },
    {
      "name": "spark.network.io.preferDirectBufs",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If enabled then off-heap buffer allocations are preferred by the shared allocators. Off-heap buffers are used to reduce garbage collection during shuffle and cache block transfer. For environments where off-heap memory is tightly limited, users may wish to turn this off to force all allocations to be on-heap."
    },
    {
      "name": "spark.port.maxRetries",
      "type": "java.lang.Integer",
      "defaultValue": "16",
      "description": "Maximum number of retries when binding to a port before giving up. When a port is given a specific value (non 0), each subsequent retry will increment the port used in the previous attempt by 1 before retrying. This essentially allows it to try a range of ports from the start port specified to port + maxRetries."
    },
    {
      "name": "spark.rpc.askTimeout",
      "type": "java.lang.String",
      "defaultValue": "spark.network.timeout",
      "description": "Duration for an RPC ask operation to wait before timing out."
    },
    {
      "name": "spark.rpc.lookupTimeout",
      "type": "java.lang.String",
      "defaultValue": "120s",
      "description": "Duration for an RPC remote endpoint lookup operation to wait before timing out."
    },
    {
      "name": "spark.network.maxRemoteBlockSizeFetchToMem",
      "type": "java.lang.String",
      "defaultValue": "200m",
      "description": "Remote block will be fetched to disk when size of the block is above this threshold in bytes. This is to avoid a giant request takes too much memory. Note this configuration will affect both shuffle fetch and block manager remote block fetch. For users who enabled external shuffle service, this feature can only work when external shuffle service is at least 2.3.0."
    },
    {
      "name": "spark.rpc.io.connectionTimeout",
      "type": "java.lang.String",
      "defaultValue": "value of spark.network.timeout",
      "description": "Timeout for the established connections between RPC peers to be marked as idled and closed if there are outstanding RPC requests but no traffic on the channel for at least `connectionTimeout`."
    },
    {
      "name": "spark.cores.max",
      "type": "java.lang.String",
      "defaultValue": "(not set)",
      "description": "When running on a standalone deploy cluster or a Mesos cluster in \"coarse-grained\" sharing mode, the maximum amount of CPU cores to request for the application from across the cluster (not from each machine). If not set, the default will be spark.deploy.defaultCores on Spark\u0027s standalone cluster manager, or infinite (all available cores) on Mesos."
    },
    {
      "name": "spark.locality.wait",
      "type": "java.lang.String",
      "defaultValue": "3s",
      "description": "How long to wait to launch a data-local task before giving up and launching it on a less-local node. The same wait will be used to step through multiple locality levels (process-local, node-local, rack-local and then any). It is also possible to customize the waiting time for each level by setting spark.locality.wait.node, etc. You should increase this setting if your tasks are long and see poor locality, but the default usually works well."
    },
    {
      "name": "spark.locality.wait.node",
      "type": "java.lang.String",
      "defaultValue": "spark.locality.wait",
      "description": "Customize the locality wait for node locality. For example, you can set this to 0 to skip node locality and search immediately for rack locality (if your cluster has rack information)."
    },
    {
      "name": "spark.locality.wait.process",
      "type": "java.lang.String",
      "defaultValue": "spark.locality.wait",
      "description": "Customize the locality wait for process locality. This affects tasks that attempt to access cached data in a particular executor process."
    },
    {
      "name": "spark.locality.wait.rack",
      "type": "java.lang.String",
      "defaultValue": "spark.locality.wait",
      "description": "Customize the locality wait for rack locality."
    },
    {
      "name": "spark.scheduler.maxRegisteredResourcesWaitingTime",
      "type": "java.lang.String",
      "defaultValue": "30s",
      "description": "Maximum amount of time to wait for resources to register before scheduling begins."
    },
    {
      "name": "spark.scheduler.minRegisteredResourcesRatio",
      "type": "java.lang.String",
      "defaultValue": "0.8 for KUBERNETES mode; 0.8 for YARN mode; 0.0 for standalone mode and Mesos coarse-grained mode",
      "description": "The minimum ratio of registered resources (registered resources / total expected resources) (resources are executors in yarn mode and Kubernetes mode, CPU cores in standalone mode and Mesos coarse-grained mode [\u0027spark.cores.max\u0027 value is total expected resources for Mesos coarse-grained mode] ) to wait for before scheduling begins. Specified as a double between 0.0 and 1.0. Regardless of whether the minimum ratio of resources has been reached, the maximum amount of time it will wait before scheduling begins is controlled by config spark.scheduler.maxRegisteredResourcesWaitingTime."
    },
    {
      "name": "spark.scheduler.mode",
      "type": "java.lang.String",
      "defaultValue": "FIFO",
      "description": "The scheduling mode between jobs submitted to the same SparkContext. Can be set to FAIR to use fair sharing instead of queueing jobs one after another. Useful for multi-user services."
    },
    {
      "name": "spark.scheduler.revive.interval",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "The interval length for the scheduler to revive the worker resource offers to run tasks."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.capacity",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "The default capacity for event queues. Spark will try to initialize an event queue using capacity specified by `spark.scheduler.listenerbus.eventqueue.queueName.capacity` first. If it\u0027s not configured, Spark will use the default capacity specified by this config. Note that capacity must be greater than 0. Consider increasing value (e.g. 20000) if listener events are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.shared.capacity",
      "type": "java.lang.String",
      "defaultValue": "spark.scheduler.listenerbus.eventqueue.capacity",
      "description": "Capacity for shared event queue in Spark listener bus, which hold events for external listener(s) that register to the listener bus. Consider increasing value, if the listener events corresponding to shared queue are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.appStatus.capacity",
      "type": "java.lang.String",
      "defaultValue": "spark.scheduler.listenerbus.eventqueue.capacity",
      "description": "Capacity for appStatus event queue, which hold events for internal application status listeners. Consider increasing value, if the listener events corresponding to appStatus queue are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.executorManagement.capacity",
      "type": "java.lang.String",
      "defaultValue": "spark.scheduler.listenerbus.eventqueue.capacity",
      "description": "Capacity for executorManagement event queue in Spark listener bus, which hold events for internal executor management listeners. Consider increasing value if the listener events corresponding to executorManagement queue are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.eventLog.capacity",
      "type": "java.lang.String",
      "defaultValue": "spark.scheduler.listenerbus.eventqueue.capacity",
      "description": "Capacity for eventLog queue in Spark listener bus, which hold events for Event logging listeners that write events to eventLogs. Consider increasing value if the listener events corresponding to eventLog queue are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.listenerbus.eventqueue.streams.capacity",
      "type": "java.lang.String",
      "defaultValue": "spark.scheduler.listenerbus.eventqueue.capacity",
      "description": "Capacity for streams queue in Spark listener bus, which hold events for internal streaming listener. Consider increasing value if the listener events corresponding to streams queue are dropped. Increasing this value may result in the driver using more memory."
    },
    {
      "name": "spark.scheduler.resource.profileMergeConflicts",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to \"true\", Spark will merge ResourceProfiles when different profiles are specified in RDDs that get combined into a single stage. When they are merged, Spark chooses the maximum of each resource and creates a new ResourceProfile. The default of false results in Spark throwing an exception if multiple different ResourceProfiles are found in RDDs going into the same stage."
    },
    {
      "name": "spark.scheduler.excludeOnFailure.unschedulableTaskSetTimeout",
      "type": "java.lang.String",
      "defaultValue": "120s",
      "description": "The timeout in seconds to wait to acquire a new executor and schedule a task before aborting a TaskSet which is unschedulable because all executors are excluded due to task failures."
    },
    {
      "name": "spark.standalone.submit.waitAppCompletion",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to true, Spark will merge ResourceProfiles when different profiles are specified in RDDs that get combined into a single stage. When they are merged, Spark chooses the maximum of each resource and creates a new ResourceProfile. The default of false results in Spark throwing an exception if multiple different ResourceProfiles are found in RDDs going into the same stage."
    },
    {
      "name": "spark.excludeOnFailure.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to \"true\", prevent Spark from scheduling tasks on executors that have been excluded due to too many task failures. The algorithm used to exclude executors and nodes can be further controlled by the other \"spark.excludeOnFailure\" configuration options."
    },
    {
      "name": "spark.excludeOnFailure.timeout",
      "type": "java.lang.String",
      "defaultValue": "1h",
      "description": "(Experimental) How long a node or executor is excluded for the entire application, before it is unconditionally removed from the excludelist to attempt running new tasks."
    },
    {
      "name": "spark.excludeOnFailure.task.maxTaskAttemptsPerExecutor",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "(Experimental) For a given task, how many times it can be retried on one executor before the executor is excluded for that task."
    },
    {
      "name": "spark.excludeOnFailure.task.maxTaskAttemptsPerNode",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "(Experimental) For a given task, how many times it can be retried on one node, before the entire node is excluded for that task."
    },
    {
      "name": "spark.excludeOnFailure.stage.maxFailedTasksPerExecutor",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "(Experimental) How many different tasks must fail on one executor, within one stage, before the executor is excluded for that stage."
    },
    {
      "name": "spark.excludeOnFailure.stage.maxFailedExecutorsPerNode",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "(Experimental) How many different executors are marked as excluded for a given stage, before the entire node is marked as failed for the stage."
    },
    {
      "name": "spark.excludeOnFailure.application.maxFailedTasksPerExecutor",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "(Experimental) How many different tasks must fail on one executor, in successful task sets, before the executor is excluded for the entire application. Excluded executors will be automatically added back to the pool of available resources after the timeout specified by spark.excludeOnFailure.timeout. Note that with dynamic allocation, though, the executors may get marked as idle and be reclaimed by the cluster manager."
    },
    {
      "name": "spark.excludeOnFailure.application.maxFailedExecutorsPerNode",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "(Experimental) How many different executors must be excluded for the entire application, before the node is excluded for the entire application. Excluded nodes will be automatically added back to the pool of available resources after the timeout specified by spark.excludeOnFailure.timeout. Note that with dynamic allocation, though, the executors on the node may get marked as idle and be reclaimed by the cluster manager."
    },
    {
      "name": "spark.excludeOnFailure.killExcludedExecutors",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Experimental) If set to \"true\", allow Spark to automatically kill the executors when they are excluded on fetch failure or excluded for the entire application, as controlled by spark.killExcludedExecutors.application.*. Note that, when an entire node is added excluded, all of the executors on that node will be killed."
    },
    {
      "name": "spark.excludeOnFailure.application.fetchFailure.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Experimental) If set to \"true\", Spark will exclude the executor immediately when a fetch failure happens. If external shuffle service is enabled, then the whole node will be excluded."
    },
    {
      "name": "spark.speculation",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to \"true\", performs speculative execution of tasks. This means if one or more tasks are running slowly in a stage, they will be re-launched."
    },
    {
      "name": "spark.speculation.interval",
      "type": "java.lang.String",
      "defaultValue": "100ms",
      "description": "How often Spark will check for tasks to speculate."
    },
    {
      "name": "spark.speculation.multiplier",
      "type": "java.lang.Double",
      "defaultValue": "1.5",
      "description": "How many times slower a task is than the median to be considered for speculation."
    },
    {
      "name": "spark.speculation.quantile",
      "type": "java.lang.Double",
      "defaultValue": "0.75",
      "description": "Fraction of tasks which must be complete before speculation is enabled for a particular stage."
    },
    {
      "name": "spark.speculation.minTaskRuntime",
      "type": "java.lang.String",
      "defaultValue": "100ms",
      "description": "Minimum amount of time a task runs before being considered for speculation. This can be used to avoid launching speculative copies of tasks that are very short."
    },
    {
      "name": "spark.speculation.task.duration.threshold",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "Task duration after which scheduler would try to speculative run the task. If provided, tasks would be speculatively run if current stage contains less tasks than or equal to the number of slots on a single executor and the task is taking longer time than the threshold. This config helps speculate stage with very few tasks. Regular speculation configs may also apply if the executor slots are large enough. E.g. tasks might be re-launched if there are enough successful runs even though the threshold hasn\u0027t been reached. The number of slots is computed based on the conf values of spark.executor.cores and spark.task.cpus minimum 1. Default unit is bytes, unless otherwise specified."
    },
    {
      "name": "spark.speculation.efficiency.processRateMultiplier",
      "type": "java.lang.Double",
      "defaultValue": "0.75",
      "description": "A multiplier that used when evaluating inefficient tasks. The higher the multiplier is, the more tasks will be possibly considered as inefficient."
    },
    {
      "name": "spark.speculation.efficiency.longRunTaskFactor",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "A task will be speculated anyway as long as its duration has exceeded the value of multiplying the factor and the time threshold (either be spark.speculation.multiplier * successfulTaskDurations.median or spark.speculation.minTaskRuntime) regardless of it\u0027s data process rate is good or not. This avoids missing the inefficient tasks when task slow isn\u0027t related to data process rate."
    },
    {
      "name": "spark.speculation.efficiency.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, spark will evaluate the efficiency of task processing through the stage task metrics or its duration, and only need to speculate the inefficient tasks. A task is inefficient when 1)its data process rate is less than the average data process rate of all successful tasks in the stage multiplied by a multiplier or 2)its duration has exceeded the value of multiplying spark.speculation.efficiency.longRunTaskFactor and the time threshold (either be spark.speculation.multiplier * successfulTaskDurations.median or spark.speculation.minTaskRuntime)."
    },
    {
      "name": "spark.task.cpus",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Number of cores to allocate for each task."
    },
    {
      "name": "spark.task.resource.{resourceName}.amount",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Amount of a particular resource type to allocate for each task, note that this can be a double. If this is specified you must also provide the executor config spark.executor.resource.{resourceName}.amount and any corresponding discovery configs so that your executors are created with that resource type. In addition to whole amounts, a fractional amount (for example, 0.25, which means 1/4th of a resource) may be specified. Fractional amounts must be less than or equal to 0.5, or in other words, the minimum amount of resource sharing is 2 tasks per resource. Additionally, fractional amounts are floored in order to assign resource slots (e.g. a 0.2222 configuration, or 1/0.2222 slots will become 4 tasks/resource, not 5)."
    },
    {
      "name": "spark.task.maxFailures",
      "type": "java.lang.Integer",
      "defaultValue": "4",
      "description": "Number of continuous failures of any particular task before giving up on the job. The total number of failures spread across different tasks will not cause the job to fail; a particular task has to fail this number of attempts continuously. If any attempt succeeds, the failure count for the task will be reset. Should be greater than or equal to 1. Number of allowed retries \u003d this value - 1."
    },
    {
      "name": "spark.task.reaper.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables monitoring of killed / interrupted tasks. When set to true, any task which is killed will be monitored by the executor until that task actually finishes executing. See the other spark.task.reaper.* configurations for details on how to control the exact behavior of this monitoring. When set to false (the default), task killing will use an older code path which lacks such monitoring."
    },
    {
      "name": "spark.task.reaper.pollingInterval",
      "type": "java.lang.String",
      "defaultValue": "10s",
      "description": "When spark.task.reaper.enabled \u003d true, this setting controls the frequency at which executors will poll the status of killed tasks. If a killed task is still running when polled then a warning will be logged and, by default, a thread-dump of the task will be logged (this thread dump can be disabled via the spark.task.reaper.threadDump setting, which is documented below)."
    },
    {
      "name": "spark.task.reaper.threadDump",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When spark.task.reaper.enabled \u003d true, this setting controls whether task thread dumps are logged during periodic polling of killed tasks. Set this to false to disable collection of thread dumps."
    },
    {
      "name": "spark.task.reaper.killTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "-1",
      "description": "When spark.task.reaper.enabled \u003d true, this setting specifies a timeout after which the executor JVM will kill itself if a killed task has not stopped running. The default value, -1, disables this mechanism and prevents the executor from self-destructing. The purpose of this setting is to act as a safety-net to prevent runaway noncancellable tasks from rendering an executor unusable."
    },
    {
      "name": "spark.stage.maxConsecutiveAttempts",
      "type": "java.lang.Integer",
      "defaultValue": "4",
      "description": "Number of consecutive stage attempts allowed before a stage is aborted."
    },
    {
      "name": "spark.stage.ignoreDecommissionFetchFailure",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether ignore stage fetch failure caused by executor decommission when count spark.stage.maxConsecutiveAttempts"
    },
    {
      "name": "spark.barrier.sync.timeout",
      "type": "java.lang.Double",
      "defaultValue": "365d",
      "description": "The timeout in seconds for each barrier() call from a barrier task. If the coordinator didn\u0027t receive all the sync messages from barrier tasks within the configured time, throw a SparkException to fail all the tasks. The default value is set to 31536000(3600 * 24 * 365) so the barrier() call shall wait for one year."
    },
    {
      "name": "spark.scheduler.barrier.maxConcurrentTasksCheck.interval",
      "type": "java.lang.String",
      "defaultValue": "15s",
      "description": "Time in seconds to wait between a max concurrent tasks check failure and the next check. A max concurrent tasks check ensures the cluster can launch more concurrent tasks than required by a barrier stage on job submitted. The check can fail in case a cluster has just started and not enough executors have registered, so we wait for a little while and try to perform the check again. If the check fails more than a configured max failure times for a job then fail current job submission. Note this config only applies to jobs that contain one or more barrier stages, we won\u0027t perform the check on non-barrier jobs."
    },
    {
      "name": "spark.scheduler.barrier.maxConcurrentTasksCheck.maxFailures",
      "type": "java.lang.Integer",
      "defaultValue": "40",
      "description": "Number of max concurrent tasks check failures allowed before fail a job submission. A max concurrent tasks check ensures the cluster can launch more concurrent tasks than required by a barrier stage on job submitted. The check can fail in case a cluster has just started and not enough executors have registered, so we wait for a little while and try to perform the check again. If the check fails more than a configured max failure times for a job then fail current job submission. Note this config only applies to jobs that contain one or more barrier stages, we won\u0027t perform the check on non-barrier jobs."
    },
    {
      "name": "spark.dynamicAllocation.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to use dynamic resource allocation, which scales the number of executors registered with this application up and down based on the workload. For more detail, see the description here. This requires spark.shuffle.service.enabled or spark.dynamicAllocation.shuffleTracking.enabled to be set. The following configurations are also relevant: spark.dynamicAllocation.minExecutors, spark.dynamicAllocation.maxExecutors, and spark.dynamicAllocation.initialExecutors spark.dynamicAllocation.executorAllocationRatio"
    },
    {
      "name": "spark.dynamicAllocation.executorIdleTimeout",
      "type": "java.lang.String",
      "defaultValue": "60s",
      "description": "If dynamic allocation is enabled and an executor has been idle for more than this duration, the executor will be removed. For more detail, see this description."
    },
    {
      "name": "spark.dynamicAllocation.cachedExecutorIdleTimeout",
      "type": "java.lang.String",
      "defaultValue": "infinity",
      "description": "If dynamic allocation is enabled and an executor which has cached data blocks has been idle for more than this duration, the executor will be removed. For more details, see this description."
    },
    {
      "name": "spark.dynamicAllocation.initialExecutors",
      "type": "java.lang.String",
      "defaultValue": "spark.dynamicAllocation.minExecutors",
      "description": "Initial number of executors to run if dynamic allocation is enabled. If `--num-executors` (or `spark.executor.instances`) is set and larger than this value, it will be used as the initial number of executors."
    },
    {
      "name": "spark.dynamicAllocation.maxExecutors",
      "type": "java.lang.String",
      "defaultValue": "infinity",
      "description": "Upper bound for the number of executors if dynamic allocation is enabled."
    },
    {
      "name": "spark.dynamicAllocation.minExecutors",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "Lower bound for the number of executors if dynamic allocation is enabled."
    },
    {
      "name": "spark.dynamicAllocation.executorAllocationRatio",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "By default, the dynamic allocation will request enough executors to maximize the parallelism according to the number of tasks to process. While this minimizes the latency of the job, with small tasks this setting can waste a lot of resources due to executor allocation overhead, as some executor might not even do any work. This setting allows to set a ratio that will be used to reduce the number of executors w.r.t. full parallelism. Defaults to 1.0 to give maximum parallelism. 0.5 will divide the target number of executors by 2 The target number of executors computed by the dynamicAllocation can still be overridden by the spark.dynamicAllocation.minExecutors and spark.dynamicAllocation.maxExecutors settings"
    },
    {
      "name": "spark.dynamicAllocation.schedulerBacklogTimeout",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "If dynamic allocation is enabled and there have been pending tasks backlogged for more than this duration, new executors will be requested. For more detail, see this description."
    },
    {
      "name": "spark.dynamicAllocation.sustainedSchedulerBacklogTimeout",
      "type": "java.lang.String",
      "defaultValue": "schedulerBacklogTimeout",
      "description": "Same as spark.dynamicAllocation.schedulerBacklogTimeout, but used only for subsequent executor requests. For more detail, see this description."
    },
    {
      "name": "spark.dynamicAllocation.shuffleTracking.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables shuffle file tracking for executors, which allows dynamic allocation without the need for an external shuffle service. This option will try to keep alive executors that are storing shuffle data for active jobs."
    },
    {
      "name": "spark.dynamicAllocation.shuffleTracking.timeout",
      "type": "java.lang.String",
      "defaultValue": "infinity",
      "description": "When shuffle tracking is enabled, controls the timeout for executors that are holding shuffle data. The default value means that Spark will rely on the shuffles being garbage collected to be able to release executors. If for some reason garbage collection is not cleaning up shuffles quickly enough, this option can be used to control when to time out executors even when they are storing shuffle data."
    },
    {
      "name": "spark.{driver|executor}.rpc.io.serverThreads",
      "type": "java.lang.String",
      "defaultValue": "Fall back on spark.rpc.io.serverThreads",
      "description": "Number of threads used in the server thread pool"
    },
    {
      "name": "spark.{driver|executor}.rpc.io.clientThreads",
      "type": "java.lang.String",
      "defaultValue": "Fall back on spark.rpc.io.clientThreads",
      "description": "Number of threads used in the client thread pool"
    },
    {
      "name": "spark.{driver|executor}.rpc.netty.dispatcher.numThreads",
      "type": "java.lang.String",
      "defaultValue": "Fall back on spark.rpc.netty.dispatcher.numThreads",
      "description": "Number of threads used in RPC message dispatcher thread pool"
    },
    {
      "name": "spark.connect.grpc.binding.port",
      "type": "java.lang.Integer",
      "defaultValue": "15002",
      "description": "Port for Spark Connect server to bind."
    },
    {
      "name": "spark.connect.grpc.interceptor.classes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma separated list of class names that must implement the io.grpc.ServerInterceptor interface"
    },
    {
      "name": "spark.connect.grpc.arrow.maxBatchSize",
      "type": "java.lang.String",
      "defaultValue": "4m",
      "description": "When using Apache Arrow, limit the maximum size of one arrow batch that can be sent from server side to client side. Currently, we conservatively use 70% of it because the size is not accurate but estimated."
    },
    {
      "name": "spark.connect.grpc.maxInboundMessageSize",
      "type": "java.lang.Integer",
      "defaultValue": "134217728",
      "description": "Sets the maximum inbound message size for the gRPC requests. Requests with a larger payload will fail."
    },
    {
      "name": "spark.connect.extensions.relation.classes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma separated list of classes that implement the trait org.apache.spark.sql.connect.plugin.RelationPlugin to support customRelation types in proto."
    },
    {
      "name": "spark.connect.extensions.expression.classes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma separated list of classes that implement the traitorg.apache.spark.sql.connect.plugin.ExpressionPlugin to support customExpression types in proto."
    },
    {
      "name": "spark.connect.extensions.command.classes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma separated list of classes that implement the traitorg.apache.spark.sql.connect.plugin.CommandPlugin to support customCommand types in proto."
    },
    {
      "name": "spark.sql.adaptive.advisoryPartitionSizeInBytes",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.sql.adaptive.shuffle.targetPostShuffleInputSize)",
      "description": "The advisory size in bytes of the shuffle partition during adaptive optimization (when spark.sql.adaptive.enabled is true). It takes effect when Spark coalesces small shuffle partitions or splits skewed shuffle partition."
    },
    {
      "name": "spark.sql.adaptive.autoBroadcastJoinThreshold",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configures the maximum size in bytes for a table that will be broadcast to all worker nodes when performing a join. By setting this value to -1 broadcasting can be disabled. The default value is same with spark.sql.autoBroadcastJoinThreshold. Note that, this config is used only in adaptive framework."
    },
    {
      "name": "spark.sql.adaptive.coalescePartitions.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true and \u0027spark.sql.adaptive.enabled\u0027 is true, Spark will coalesce contiguous shuffle partitions according to the target size (specified by \u0027spark.sql.adaptive.advisoryPartitionSizeInBytes\u0027), to avoid too many small tasks."
    },
    {
      "name": "spark.sql.adaptive.coalescePartitions.initialPartitionNum",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The initial number of shuffle partitions before coalescing. If not set, it equals to spark.sql.shuffle.partitions. This configuration only has an effect when \u0027spark.sql.adaptive.enabled\u0027 and \u0027spark.sql.adaptive.coalescePartitions.enabled\u0027 are both true."
    },
    {
      "name": "spark.sql.adaptive.coalescePartitions.minPartitionSize",
      "type": "java.lang.String",
      "defaultValue": "1MB",
      "description": "The minimum size of shuffle partitions after coalescing. This is useful when the adaptively calculated target size is too small during partition coalescing."
    },
    {
      "name": "spark.sql.adaptive.coalescePartitions.parallelismFirst",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, Spark does not respect the target size specified by \u0027spark.sql.adaptive.advisoryPartitionSizeInBytes\u0027 (default 64MB) when coalescing contiguous shuffle partitions, but adaptively calculate the target size according to the default parallelism of the Spark cluster. The calculated size is usually smaller than the configured target size. This is to maximize the parallelism and avoid performance regression when enabling adaptive query execution. It\u0027s recommended to set this config to false and respect the configured target size."
    },
    {
      "name": "spark.sql.adaptive.customCostEvaluatorClass",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The custom cost evaluator class to be used for adaptive execution. If not being set, Spark will use its own SimpleCostEvaluator by default."
    },
    {
      "name": "spark.sql.adaptive.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable adaptive query execution, which re-optimizes the query plan in the middle of query execution, based on accurate runtime statistics."
    },
    {
      "name": "spark.sql.adaptive.forceOptimizeSkewedJoin",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, force enable OptimizeSkewedJoin even if it introduces extra shuffle."
    },
    {
      "name": "spark.sql.adaptive.localShuffleReader.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true and \u0027spark.sql.adaptive.enabled\u0027 is true, Spark tries to use local shuffle reader to read the shuffle data when the shuffle partitioning is not needed, for example, after converting sort-merge join to broadcast-hash join."
    },
    {
      "name": "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold",
      "type": "java.lang.String",
      "defaultValue": "0b",
      "description": "Configures the maximum size in bytes per partition that can be allowed to build local hash map. If this value is not smaller than spark.sql.adaptive.advisoryPartitionSizeInBytes and all the partition size are not larger than this config, join selection prefer to use shuffled hash join instead of sort merge join regardless of the value of spark.sql.join.preferSortMergeJoin."
    },
    {
      "name": "spark.sql.adaptive.optimizeSkewsInRebalancePartitions.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true and \u0027spark.sql.adaptive.enabled\u0027 is true, Spark will optimize the skewed shuffle partitions in RebalancePartitions and split them to smaller ones according to the target size (specified by \u0027spark.sql.adaptive.advisoryPartitionSizeInBytes\u0027), to avoid data skew."
    },
    {
      "name": "spark.sql.adaptive.optimizer.excludedRules",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configures a list of rules to be disabled in the adaptive optimizer, in which the rules are specified by their rule names and separated by comma. The optimizer will log the rules that have indeed been excluded."
    },
    {
      "name": "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor",
      "type": "java.lang.Double",
      "defaultValue": "0.2",
      "description": "A partition will be merged during splitting if its size is small than this factor multiply spark.sql.adaptive.advisoryPartitionSizeInBytes."
    },
    {
      "name": "spark.sql.adaptive.skewJoin.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true and \u0027spark.sql.adaptive.enabled\u0027 is true, Spark dynamically handles skew in shuffled join (sort-merge and shuffled hash) by splitting (and replicating if needed) skewed partitions."
    },
    {
      "name": "spark.sql.adaptive.skewJoin.skewedPartitionFactor",
      "type": "java.lang.Double",
      "defaultValue": "5.0",
      "description": "A partition is considered as skewed if its size is larger than this factor multiplying the median partition size and also larger than \u0027spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes\u0027"
    },
    {
      "name": "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes",
      "type": "java.lang.String",
      "defaultValue": "256MB",
      "description": "A partition is considered as skewed if its size in bytes is larger than this threshold and also larger than \u0027spark.sql.adaptive.skewJoin.skewedPartitionFactor\u0027 multiplying the median partition size. Ideally this config should be set larger than \u0027spark.sql.adaptive.advisoryPartitionSizeInBytes\u0027."
    },
    {
      "name": "spark.sql.ansi.doubleQuotedIdentifiers",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true and \u0027spark.sql.ansi.enabled\u0027 is true, Spark SQL reads literals enclosed in double quoted (\") as identifiers. When false they are read as string literals."
    },
    {
      "name": "spark.sql.ansi.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, Spark SQL uses an ANSI compliant dialect instead of being Hive compliant. For example, Spark will throw an exception at runtime instead of returning null results when the inputs to a SQL operator/function are invalid.For full details of this dialect, you can find them in the section \"ANSI Compliance\" of Spark\u0027s documentation. Some ANSI dialect features may be not from the ANSI SQL standard directly, but their behaviors align with ANSI SQL\u0027s style"
    },
    {
      "name": "spark.sql.ansi.enforceReservedKeywords",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true and \u0027spark.sql.ansi.enabled\u0027 is true, the Spark SQL parser enforces the ANSI reserved keywords and forbids SQL queries that use reserved keywords as alias names and/or identifiers for table, view, function, etc."
    },
    {
      "name": "spark.sql.ansi.relationPrecedence",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true and \u0027spark.sql.ansi.enabled\u0027 is true, JOIN takes precedence over comma when combining relation. For example, t1, t2 JOIN t3 should result to t1 X (t2 X t3). If the config is false, the result is (t1 X t2) X t3."
    },
    {
      "name": "spark.sql.autoBroadcastJoinThreshold",
      "type": "java.lang.String",
      "defaultValue": "10MB",
      "description": "Configures the maximum size in bytes for a table that will be broadcast to all worker nodes when performing a join. By setting this value to -1 broadcasting can be disabled. Note that currently statistics are only supported for Hive Metastore tables where the command ANALYZE TABLE \u003ctableName\u003e COMPUTE STATISTICS noscan has been run, and file-based data source tables where the statistics are computed directly on the files of data."
    },
    {
      "name": "spark.sql.avro.compression.codec",
      "type": "java.lang.String",
      "defaultValue": "snappy",
      "description": "Compression codec used in writing of AVRO files. Supported codecs: uncompressed, deflate, snappy, bzip2, xz and zstandard. Default codec is snappy."
    },
    {
      "name": "spark.sql.avro.deflate.level",
      "type": "java.lang.Integer",
      "defaultValue": "-1",
      "description": "Compression level for the deflate codec used in writing of AVRO files. Valid value must be in the range of from 1 to 9 inclusive or -1. The default value is -1 which corresponds to 6 level in the current implementation."
    },
    {
      "name": "spark.sql.avro.filterPushdown.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable filter pushdown to Avro datasource."
    },
    {
      "name": "spark.sql.broadcastTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "300",
      "description": "Timeout in seconds for the broadcast wait time in broadcast joins."
    },
    {
      "name": "spark.sql.bucketing.coalesceBucketsInJoin.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, if two bucketed tables with the different number of buckets are joined, the side with a bigger number of buckets will be coalesced to have the same number of buckets as the other side. Bigger number of buckets is divisible by the smaller number of buckets. Bucket coalescing is applied to sort-merge joins and shuffled hash join. Note: Coalescing bucketed table can avoid unnecessary shuffling in join, but it also reduces parallelism and could possibly cause OOM for shuffled hash join."
    },
    {
      "name": "spark.sql.bucketing.coalesceBucketsInJoin.maxBucketRatio",
      "type": "java.lang.Integer",
      "defaultValue": "4",
      "description": "The ratio of the number of two buckets being coalesced should be less than or equal to this value for bucket coalescing to be applied. This configuration only has an effect when \u0027spark.sql.bucketing.coalesceBucketsInJoin.enabled\u0027 is set to true."
    },
    {
      "name": "spark.sql.catalog.spark_catalog",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A catalog implementation that will be used as the v2 interface to Spark\u0027s built-in v1 catalog: spark_catalog. This catalog shares its identifier namespace with the spark_catalog and must be consistent with it; for example, if a table can be loaded by the spark_catalog, this catalog must also return the table metadata. To delegate operations to the spark_catalog, implementations can extend \u0027CatalogExtension\u0027."
    },
    {
      "name": "spark.sql.cbo.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables CBO for estimation of plan statistics when set true."
    },
    {
      "name": "spark.sql.cbo.joinReorder.dp.star.filter",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Applies star-join filter heuristics to cost based join enumeration."
    },
    {
      "name": "spark.sql.cbo.joinReorder.dp.threshold",
      "type": "java.lang.Integer",
      "defaultValue": "12",
      "description": "The maximum number of joined nodes allowed in the dynamic programming algorithm."
    },
    {
      "name": "spark.sql.cbo.joinReorder.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables join reorder in CBO."
    },
    {
      "name": "spark.sql.cbo.planStats.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, the logical plan will fetch row counts and column statistics from catalog."
    },
    {
      "name": "spark.sql.cbo.starSchemaDetection",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, it enables join reordering based on star schema detection."
    },
    {
      "name": "spark.sql.charAsVarchar",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, Spark replaces CHAR type with VARCHAR type in CREATE/REPLACE/ALTER TABLE commands, so that newly created/updated tables will not have CHAR type columns/fields. Existing tables with CHAR type columns/fields are not affected by this config."
    },
    {
      "name": "spark.sql.cli.print.header",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When set to true, spark-sql CLI prints the names of the columns in query output."
    },
    {
      "name": "spark.sql.columnNameOfCorruptRecord",
      "type": "java.lang.String",
      "defaultValue": "_corrupt_record",
      "description": "The name of internal column for storing raw/un-parsed JSON and CSV records that fail to parse."
    },
    {
      "name": "spark.sql.csv.filterPushdown.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable filter pushdown to CSV datasource."
    },
    {
      "name": "spark.sql.datetime.java8API.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If the configuration property is set to true, java.time.Instant and java.time.LocalDate classes of Java 8 API are used as external types for Catalyst\u0027s TimestampType and DateType. If it is set to false, java.sql.Timestamp and java.sql.Date are used for the same purpose."
    },
    {
      "name": "spark.sql.debug.maxToStringFields",
      "type": "java.lang.Integer",
      "defaultValue": "25",
      "description": "Maximum number of fields of sequence-like entries can be converted to strings in debug output. Any elements beyond the limit will be dropped and replaced by a \"... N more fields\" placeholder."
    },
    {
      "name": "spark.sql.defaultCatalog",
      "type": "java.lang.String",
      "defaultValue": "spark_catalog",
      "description": "Name of the default catalog. This will be the current catalog if users have not explicitly set the current catalog yet."
    },
    {
      "name": "spark.sql.error.messageFormat",
      "type": "java.lang.String",
      "defaultValue": "PRETTY",
      "description": "When PRETTY, the error message consists of textual representation of error class, message and query context. The MINIMAL and STANDARD formats are pretty JSON formats where STANDARD includes an additional JSON field message. This configuration property influences on error messages of Thrift Server and SQL CLI while running queries."
    },
    {
      "name": "spark.sql.execution.arrow.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Deprecated since Spark 3.0, please set \u0027spark.sql.execution.arrow.pyspark.enabled\u0027.)"
    },
    {
      "name": "spark.sql.execution.arrow.fallback.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "(Deprecated since Spark 3.0, please set \u0027spark.sql.execution.arrow.pyspark.fallback.enabled\u0027.)"
    },
    {
      "name": "spark.sql.execution.arrow.localRelationThreshold",
      "type": "java.lang.String",
      "defaultValue": "48MB",
      "description": "When converting Arrow batches to Spark DataFrame, local collections are used in the driver side if the byte size of Arrow batches is smaller than this threshold. Otherwise, the Arrow batches are sent and deserialized to Spark internal rows in the executors."
    },
    {
      "name": "spark.sql.execution.arrow.maxRecordsPerBatch",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "When using Apache Arrow, limit the maximum number of records that can be written to a single ArrowRecordBatch in memory. If set to zero or negative there is no limit."
    },
    {
      "name": "spark.sql.execution.arrow.pyspark.enabled",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.sql.execution.arrow.enabled)",
      "description": "When true, make use of Apache Arrow for columnar data transfers in PySpark. This optimization applies to: 1. pyspark.sql.DataFrame.toPandas. 2. pyspark.sql.SparkSession.createDataFrame when its input is a Pandas DataFrame or a NumPy ndarray. The following data type is unsupported: ArrayType of TimestampType."
    },
    {
      "name": "spark.sql.execution.arrow.pyspark.fallback.enabled",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.sql.execution.arrow.fallback.enabled)",
      "description": "When true, optimizations enabled by \u0027spark.sql.execution.arrow.pyspark.enabled\u0027 will fallback automatically to non-optimized implementations if an error occurs."
    },
    {
      "name": "spark.sql.execution.arrow.pyspark.selfDestruct.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "(Experimental) When true, make use of Apache Arrow\u0027s self-destruct and split-blocks options for columnar data transfers in PySpark, when converting from Arrow to Pandas. This reduces memory usage at the cost of some CPU time. This optimization applies to: pyspark.sql.DataFrame.toPandas when \u0027spark.sql.execution.arrow.pyspark.enabled\u0027 is set."
    },
    {
      "name": "spark.sql.execution.arrow.sparkr.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, make use of Apache Arrow for columnar data transfers in SparkR. This optimization applies to: 1. createDataFrame when its input is an R DataFrame 2. collect 3. dapply 4. gapply The following data types are unsupported: FloatType, BinaryType, ArrayType, StructType and MapType."
    },
    {
      "name": "spark.sql.execution.pandas.udf.buffer.size",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.buffer.size)",
      "description": "Same as spark.buffer.size but only applies to Pandas UDF executions. If it is not set, the fallback is spark.buffer.size. Note that Pandas execution requires more than 4 bytes. Lowering this value could make small Pandas UDF batch iterated and pipelined; however, it might degrade performance. See SPARK-27870."
    },
    {
      "name": "spark.sql.execution.pyspark.udf.simplifiedTraceback.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, the traceback from Python UDFs is simplified. It hides the Python worker, (de)serialization, etc from PySpark in tracebacks, and only shows the exception messages from UDFs. Note that this works only with CPython 3.7+."
    },
    {
      "name": "spark.sql.execution.topKSortFallbackThreshold",
      "type": "java.lang.Integer",
      "defaultValue": "2147483632",
      "description": "In SQL queries with a SORT followed by a LIMIT like \u0027SELECT x FROM t ORDER BY y LIMIT m\u0027, if m is under this threshold, do a top-K sort in memory, otherwise do a global sort which spills to disk if necessary."
    },
    {
      "name": "spark.sql.files.ignoreCorruptFiles",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to ignore corrupt files. If true, the Spark jobs will continue to run when encountering corrupted files and the contents that have been read will still be returned. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC."
    },
    {
      "name": "spark.sql.files.ignoreMissingFiles",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to ignore missing files. If true, the Spark jobs will continue to run when encountering missing files and the contents that have been read will still be returned. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC."
    },
    {
      "name": "spark.sql.files.maxPartitionBytes",
      "type": "java.lang.String",
      "defaultValue": "128MB",
      "description": "The maximum number of bytes to pack into a single partition when reading files. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC."
    },
    {
      "name": "spark.sql.files.maxRecordsPerFile",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "Maximum number of records to write out to a single file. If this value is zero or negative, there is no limit."
    },
    {
      "name": "spark.sql.files.minPartitionNum",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The suggested (not guaranteed) minimum number of split file partitions. If not set, the default value is spark.default.parallelism. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC."
    },
    {
      "name": "spark.sql.function.concatBinaryAsString",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When this option is set to false and all inputs are binary, functions.concat returns an output as binary. Otherwise, it returns as a string."
    },
    {
      "name": "spark.sql.function.eltOutputAsString",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When this option is set to false and all inputs are binary, elt returns an output as binary. Otherwise, it returns as a string."
    },
    {
      "name": "spark.sql.groupByAliases",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, aliases in a select list can be used in group by clauses. When false, an analysis exception is thrown in the case."
    },
    {
      "name": "spark.sql.groupByOrdinal",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, the ordinal numbers in group by clauses are treated as the position in the select list. When false, the ordinal numbers are ignored."
    },
    {
      "name": "spark.sql.hive.convertInsertingPartitionedTable",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, and spark.sql.hive.convertMetastoreParquet or spark.sql.hive.convertMetastoreOrc is true, the built-in ORC/Parquet writer is usedto process inserting into partitioned ORC/Parquet tables created by using the HiveSQL syntax."
    },
    {
      "name": "spark.sql.hive.convertMetastoreCtas",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, Spark will try to use built-in data source writer instead of Hive serde in CTAS. This flag is effective only if spark.sql.hive.convertMetastoreParquet or spark.sql.hive.convertMetastoreOrc is enabled respectively for Parquet and ORC formats"
    },
    {
      "name": "spark.sql.hive.convertMetastoreInsertDir",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, Spark will try to use built-in data source writer instead of Hive serde in INSERT OVERWRITE DIRECTORY. This flag is effective only if spark.sql.hive.convertMetastoreParquet or spark.sql.hive.convertMetastoreOrc is enabled respectively for Parquet and ORC formats"
    },
    {
      "name": "spark.sql.hive.convertMetastoreOrc",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, the built-in ORC reader and writer are used to process ORC tables created by using the HiveQL syntax, instead of Hive serde."
    },
    {
      "name": "spark.sql.hive.convertMetastoreParquet",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, the built-in Parquet reader and writer are used to process parquet tables created by using the HiveQL syntax, instead of Hive serde."
    },
    {
      "name": "spark.sql.hive.convertMetastoreParquet.mergeSchema",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, also tries to merge possibly different but compatible Parquet schemas in different Parquet data files. This configuration is only effective when \"spark.sql.hive.convertMetastoreParquet\" is true."
    },
    {
      "name": "spark.sql.hive.dropPartitionByName.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, Spark will get partition name rather than partition object to drop partition, which can improve the performance of drop partition."
    },
    {
      "name": "spark.sql.hive.filesourcePartitionFileCacheSize",
      "type": "java.lang.Integer",
      "defaultValue": "262144000",
      "description": "When nonzero, enable caching of partition file metadata in memory. All tables share a cache that can use up to specified num bytes for file metadata. This conf only has an effect when hive filesource partition management is enabled."
    },
    {
      "name": "spark.sql.hive.manageFilesourcePartitions",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable metastore partition management for file source tables as well. This includes both datasource and converted Hive tables. When partition management is enabled, datasource tables store partition in the Hive metastore, and use the metastore to prune partitions during query planning when spark.sql.hive.metastorePartitionPruning is set to true."
    },
    {
      "name": "spark.sql.hive.metastorePartitionPruning",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, some predicates will be pushed down into the Hive metastore so that unmatching partitions can be eliminated earlier."
    },
    {
      "name": "spark.sql.hive.metastorePartitionPruningFallbackOnException",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to fallback to get all partitions from Hive metastore and perform partition pruning on Spark client side, when encountering MetaException from the metastore. Note that Spark query performance may degrade if this is enabled and there are many partitions to be listed. If this is disabled, Spark will fail the query instead."
    },
    {
      "name": "spark.sql.hive.metastorePartitionPruningFastFallback",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When this config is enabled, if the predicates are not supported by Hive or Spark does fallback due to encountering MetaException from the metastore, Spark will instead prune partitions by getting the partition names first and then evaluating the filter expressions on the client side. Note that the predicates with TimeZoneAwareExpression is not supported."
    },
    {
      "name": "spark.sql.hive.thriftServer.async",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true, Hive Thrift server executes SQL queries in an asynchronous way."
    },
    {
      "name": "spark.sql.hive.verifyPartitionPath",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, check all the partition paths under the table\u0027s root directory when reading data stored in HDFS. This configuration will be deprecated in the future releases and replaced by spark.files.ignoreMissingFiles."
    },
    {
      "name": "spark.sql.inMemoryColumnarStorage.batchSize",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "Controls the size of batches for columnar caching. Larger batch sizes can improve memory utilization and compression, but risk OOMs when caching data."
    },
    {
      "name": "spark.sql.inMemoryColumnarStorage.compressed",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When set to true Spark SQL will automatically select a compression codec for each column based on statistics of the data."
    },
    {
      "name": "spark.sql.inMemoryColumnarStorage.enableVectorizedReader",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables vectorized reader for columnar caching."
    },
    {
      "name": "spark.sql.json.filterPushdown.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable filter pushdown to JSON datasource."
    },
    {
      "name": "spark.sql.jsonGenerator.ignoreNullFields",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to ignore null fields when generating JSON objects in JSON data source and JSON functions such as to_json. If false, it generates null for null fields in JSON objects."
    },
    {
      "name": "spark.sql.leafNodeDefaultParallelism",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The default parallelism of Spark SQL leaf nodes that produce data, such as the file scan node, the local data scan node, the range node, etc. The default value of this config is \u0027SparkContext#defaultParallelism\u0027."
    },
    {
      "name": "spark.sql.mapKeyDedupPolicy",
      "type": "java.lang.String",
      "defaultValue": "EXCEPTION",
      "description": "The policy to deduplicate map keys in builtin function: CreateMap, MapFromArrays, MapFromEntries, StringToMap, MapConcat and TransformKeys. When EXCEPTION, the query fails if duplicated map keys are detected. When LAST_WIN, the map key that is inserted at last takes precedence."
    },
    {
      "name": "spark.sql.maven.additionalRemoteRepositories",
      "type": "java.lang.String",
      "defaultValue": "https://maven-central.storage-download.googleapis.com/maven2/",
      "description": "A comma-delimited string config of the optional additional remote Maven mirror repositories. This is only used for downloading Hive jars in IsolatedClientLoader if the default Maven Central repo is unreachable."
    },
    {
      "name": "spark.sql.maxMetadataStringLength",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "Maximum number of characters to output for a metadata string. e.g. file location in DataSourceScanExec, every value will be abbreviated if exceed length."
    },
    {
      "name": "spark.sql.maxPlanStringLength",
      "type": "java.lang.Integer",
      "defaultValue": "2147483632",
      "description": "Maximum number of characters to output for a plan string. If the plan is longer, further output will be truncated. The default setting always generates a full plan. Set this to a lower value such as 8k if plan strings are taking up too much memory or are causing OutOfMemory errors in the driver or UI processes."
    },
    {
      "name": "spark.sql.maxSinglePartitionBytes",
      "type": "java.lang.String",
      "defaultValue": "9223372036854775807b",
      "description": "The maximum number of bytes allowed for a single partition. Otherwise, The planner will introduce shuffle to improve parallelism."
    },
    {
      "name": "spark.sql.optimizer.collapseProjectAlwaysInline",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to always collapse two adjacent projections and inline expressions even if it causes extra duplication."
    },
    {
      "name": "spark.sql.optimizer.dynamicPartitionPruning.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, we will generate predicate for partition column when it\u0027s used as join key"
    },
    {
      "name": "spark.sql.optimizer.enableCsvExpressionOptimization",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to optimize CSV expressions in SQL optimizer. It includes pruning unnecessary columns from from_csv."
    },
    {
      "name": "spark.sql.optimizer.enableJsonExpressionOptimization",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to optimize JSON expressions in SQL optimizer. It includes pruning unnecessary columns from from_json, simplifying from_json + to_json, to_json + named_struct(from_json.col1, from_json.col2, ....)."
    },
    {
      "name": "spark.sql.optimizer.excludedRules",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configures a list of rules to be disabled in the optimizer, in which the rules are specified by their rule names and separated by comma. It is not guaranteed that all the rules in this configuration will eventually be excluded, as some rules are necessary for correctness. The optimizer will log the rules that have indeed been excluded."
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.applicationSideScanSizeThreshold",
      "type": "java.lang.String",
      "defaultValue": "10GB",
      "description": "Byte size threshold of the Bloom filter application side plan\u0027s aggregated scan size. Aggregated scan byte size of the Bloom filter application side needs to be over this value to inject a bloom filter."
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.creationSideThreshold",
      "type": "java.lang.String",
      "defaultValue": "10MB",
      "description": "Size threshold of the bloom filter creation side plan. Estimated size needs to be under this value to try to inject bloom filter."
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true and if one side of a shuffle join has a selective predicate, we attempt to insert a bloom filter in the other side to reduce the amount of shuffle data."
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.expectedNumItems",
      "type": "java.lang.Integer",
      "defaultValue": "1000000",
      "description": "The default number of expected items for the runtime bloomfilter"
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.maxNumBits",
      "type": "java.lang.Integer",
      "defaultValue": "67108864",
      "description": "The max number of bits to use for the runtime bloom filter"
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.maxNumItems",
      "type": "java.lang.Integer",
      "defaultValue": "4000000",
      "description": "The max allowed number of expected items for the runtime bloom filter"
    },
    {
      "name": "spark.sql.optimizer.runtime.bloomFilter.numBits",
      "type": "java.lang.Integer",
      "defaultValue": "8388608",
      "description": "The default number of bits to use for the runtime bloom filter"
    },
    {
      "name": "spark.sql.optimizer.runtime.rowLevelOperationGroupFilter.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables runtime group filtering for group-based row-level operations. Data sources that replace groups of data (e.g. files, partitions) may prune entire groups using provided data source filters when planning a row-level operation scan. However, such filtering is limited as not all expressions can be converted into data source filters and some expressions can only be evaluated by Spark (e.g. subqueries). Since rewriting groups is expensive, Spark can execute a query at runtime to find what records match the condition of the row-level operation. The information about matching records will be passed back to the row-level operation scan, allowing data sources to discard groups that don\u0027t have to be rewritten."
    },
    {
      "name": "spark.sql.optimizer.runtimeFilter.number.threshold",
      "type": "java.lang.Integer",
      "defaultValue": "10",
      "description": "The total number of injected runtime filters (non-DPP) for a single query. This is to prevent driver OOMs with too many Bloom filters."
    },
    {
      "name": "spark.sql.optimizer.runtimeFilter.semiJoinReduction.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true and if one side of a shuffle join has a selective predicate, we attempt to insert a semi join in the other side to reduce the amount of shuffle data."
    },
    {
      "name": "spark.sql.orc.aggregatePushdown",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, aggregates will be pushed down to ORC for optimization. Support MIN, MAX and COUNT as aggregate expression. For MIN/MAX, support boolean, integer, float and date type. For COUNT, support all data types. If statistics is missing from any ORC file footer, exception would be thrown."
    },
    {
      "name": "spark.sql.orc.columnarReaderBatchSize",
      "type": "java.lang.Integer",
      "defaultValue": "4096",
      "description": "The number of rows to include in a orc vectorized reader batch. The number should be carefully chosen to minimize overhead and avoid OOMs in reading data."
    },
    {
      "name": "spark.sql.orc.columnarWriterBatchSize",
      "type": "java.lang.Integer",
      "defaultValue": "1024",
      "description": "The number of rows to include in a orc vectorized writer batch. The number should be carefully chosen to minimize overhead and avoid OOMs in writing data."
    },
    {
      "name": "spark.sql.orc.compression.codec",
      "type": "java.lang.String",
      "defaultValue": "snappy",
      "description": "Sets the compression codec used when writing ORC files. If either compression or orc.compress is specified in the table-specific options/properties, the precedence would be compression, orc.compress, spark.sql.orc.compression.codec.Acceptable values include: none, uncompressed, snappy, zlib, lzo, zstd, lz4."
    },
    {
      "name": "spark.sql.orc.enableNestedColumnVectorizedReader",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables vectorized orc decoding for nested column."
    },
    {
      "name": "spark.sql.orc.enableVectorizedReader",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables vectorized orc decoding."
    },
    {
      "name": "spark.sql.orc.filterPushdown",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, enable filter pushdown for ORC files."
    },
    {
      "name": "spark.sql.orc.mergeSchema",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, the Orc data source merges schemas collected from all data files, otherwise the schema is picked from a random data file."
    },
    {
      "name": "spark.sql.orderByOrdinal",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, the ordinal numbers are treated as the position in the select list. When false, the ordinal numbers in order/sort by clause are ignored."
    },
    {
      "name": "spark.sql.parquet.aggregatePushdown",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, aggregates will be pushed down to Parquet for optimization. Support MIN, MAX and COUNT as aggregate expression. For MIN/MAX, support boolean, integer, float and date type. For COUNT, support all data types. If statistics is missing from any Parquet file footer, exception would be thrown."
    },
    {
      "name": "spark.sql.parquet.binaryAsString",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Some other Parquet-producing systems, in particular Impala and older versions of Spark SQL, do not differentiate between binary data and strings when writing out the Parquet schema. This flag tells Spark SQL to interpret binary data as a string to provide compatibility with these systems."
    },
    {
      "name": "spark.sql.parquet.columnarReaderBatchSize",
      "type": "java.lang.Integer",
      "defaultValue": "4096",
      "description": "The number of rows to include in a parquet vectorized reader batch. The number should be carefully chosen to minimize overhead and avoid OOMs in reading data."
    },
    {
      "name": "spark.sql.parquet.compression.codec",
      "type": "java.lang.String",
      "defaultValue": "snappy",
      "description": "Sets the compression codec used when writing Parquet files. If either compression or parquet.compression is specified in the table-specific options/properties, the precedence would be compression, parquet.compression, spark.sql.parquet.compression.codec. Acceptable values include: none, uncompressed, snappy, gzip, lzo, brotli, lz4, zstd."
    },
    {
      "name": "spark.sql.parquet.enableNestedColumnVectorizedReader",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables vectorized Parquet decoding for nested columns (e.g., struct, list, map). Requires spark.sql.parquet.enableVectorizedReader to be enabled."
    },
    {
      "name": "spark.sql.parquet.enableVectorizedReader",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables vectorized parquet decoding."
    },
    {
      "name": "spark.sql.parquet.fieldId.read.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Field ID is a native field of the Parquet schema spec. When enabled, Parquet readers will use field IDs (if present) in the requested Spark schema to look up Parquet fields instead of using column names"
    },
    {
      "name": "spark.sql.parquet.fieldId.read.ignoreMissing",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When the Parquet file doesn\u0027t have any field IDs but the Spark read schema is using field IDs to read, we will silently return nulls when this flag is enabled, or error otherwise."
    },
    {
      "name": "spark.sql.parquet.fieldId.write.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Field ID is a native field of the Parquet schema spec. When enabled, Parquet writers will populate the field Id metadata (if present) in the Spark schema to the Parquet schema."
    },
    {
      "name": "spark.sql.parquet.filterPushdown",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Enables Parquet filter push-down optimization when set to true."
    },
    {
      "name": "spark.sql.parquet.inferTimestampNTZ.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When enabled, Parquet timestamp columns with annotation isAdjustedToUTC \u003d false are inferred as TIMESTAMP_NTZ type during schema inference. Otherwise, all the Parquet timestamp columns are inferred as TIMESTAMP_LTZ types. Note that Spark writes the output schema into Parquet\u0027s footer metadata on file writing and leverages it on file reading. Thus this configuration only affects the schema inference on Parquet files which are not written by Spark."
    },
    {
      "name": "spark.sql.parquet.int96AsTimestamp",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Some Parquet-producing systems, in particular Impala, store Timestamp into INT96. Spark would also store Timestamp as INT96 because we need to avoid precision lost of the nanoseconds field. This flag tells Spark SQL to interpret INT96 data as a timestamp to provide compatibility with these systems."
    },
    {
      "name": "spark.sql.parquet.int96TimestampConversion",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "This controls whether timestamp adjustments should be applied to INT96 data when converting to timestamps, for data written by Impala. This is necessary because Impala stores INT96 data with a different timezone offset than Hive \u0026 Spark."
    },
    {
      "name": "spark.sql.parquet.mergeSchema",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, the Parquet data source merges schemas collected from all data files, otherwise the schema is picked from the summary file or a random data file if no summary file is available."
    },
    {
      "name": "spark.sql.parquet.outputTimestampType",
      "type": "java.lang.String",
      "defaultValue": "INT96",
      "description": "Sets which Parquet timestamp type to use when Spark writes data to Parquet files. INT96 is a non-standard but commonly used timestamp type in Parquet. TIMESTAMP_MICROS is a standard timestamp type in Parquet, which stores number of microseconds from the Unix epoch. TIMESTAMP_MILLIS is also standard, but with millisecond precision, which means Spark has to truncate the microsecond portion of its timestamp value."
    },
    {
      "name": "spark.sql.parquet.recordLevelFilter.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, enables Parquet\u0027s native record-level filtering using the pushed down filters. This configuration only has an effect when \u0027spark.sql.parquet.filterPushdown\u0027 is enabled and the vectorized reader is not used. You can ensure the vectorized reader is not used by setting \u0027spark.sql.parquet.enableVectorizedReader\u0027 to false."
    },
    {
      "name": "spark.sql.parquet.respectSummaryFiles",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, we make assumption that all part-files of Parquet are consistent with summary files and we will ignore them when merging schema. Otherwise, if this is false, which is the default, we will merge all part-files. This should be considered as expert-only option, and shouldn\u0027t be enabled before knowing what it means exactly."
    },
    {
      "name": "spark.sql.parquet.writeLegacyFormat",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, data will be written in a way of Spark 1.4 and earlier. For example, decimal values will be written in Apache Parquet\u0027s fixed-length byte array format, which other systems such as Apache Hive and Apache Impala use. If false, the newer format in Parquet will be used. For example, decimals will be written in int-based format. If Parquet output is intended for use with systems that do not support this newer format, set to true."
    },
    {
      "name": "spark.sql.parser.quotedRegexColumnNames",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, quoted Identifiers (using backticks) in SELECT statement are interpreted as regular expressions."
    },
    {
      "name": "spark.sql.pivotMaxValues",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "When doing a pivot without specifying values for the pivot column this is the maximum number of (distinct) values that will be collected without error."
    },
    {
      "name": "spark.sql.pyspark.inferNestedDictAsStruct.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "PySpark\u0027s SparkSession.createDataFrame infers the nested dict as a map by default. When it set to true, it infers the nested dict as a struct."
    },
    {
      "name": "spark.sql.pyspark.jvmStacktrace.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, it shows the JVM stacktrace in the user-facing PySpark exception together with Python stacktrace. By default, it is disabled to hide JVM stacktrace and shows a Python-friendly exception only. Note that this is independent from log level settings."
    },
    {
      "name": "spark.sql.pyspark.legacy.inferArrayTypeFromFirstElement.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "PySpark\u0027s SparkSession.createDataFrame infers the element type of an array from all values in the array by default. If this config is set to true, it restores the legacy behavior of only inferring the type from the first array element."
    },
    {
      "name": "spark.sql.readSideCharPadding",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, Spark applies string padding when reading CHAR type columns/fields, in addition to the write-side padding. This config is true by default to better enforce CHAR type semantic in cases such as external tables."
    },
    {
      "name": "spark.sql.redaction.options.regex",
      "type": "java.lang.String",
      "defaultValue": "(?i)url",
      "description": "Regex to decide which keys in a Spark SQL command\u0027s options map contain sensitive information. The values of options whose names that match this regex will be redacted in the explain output. This redaction is applied on top of the global redaction configuration defined by spark.redaction.regex."
    },
    {
      "name": "spark.sql.redaction.string.regex",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.redaction.string.regex)",
      "description": "Regex to decide which parts of strings produced by Spark contain sensitive information. When this regex matches a string part, that string part is replaced by a dummy value. This is currently used to redact the output of SQL explain commands. When this conf is not set, the value from spark.redaction.string.regex is used."
    },
    {
      "name": "spark.sql.repl.eagerEval.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables eager evaluation or not. When true, the top K rows of Dataset will be displayed if and only if the REPL supports the eager evaluation. Currently, the eager evaluation is supported in PySpark and SparkR. In PySpark, for the notebooks like Jupyter, the HTML table (generated by repr_html) will be returned. For plain Python REPL, the returned outputs are formatted like dataframe.show(). In SparkR, the returned outputs are showed similar to R data.frame would."
    },
    {
      "name": "spark.sql.repl.eagerEval.maxNumRows",
      "type": "java.lang.Integer",
      "defaultValue": "20",
      "description": "The max number of rows that are returned by eager evaluation. This only takes effect when spark.sql.repl.eagerEval.enabled is set to true. The valid range of this config is from 0 to (Int.MaxValue - 1), so the invalid config like negative and greater than (Int.MaxValue - 1) will be normalized to 0 and (Int.MaxValue - 1)."
    },
    {
      "name": "spark.sql.repl.eagerEval.truncate",
      "type": "java.lang.Integer",
      "defaultValue": "20",
      "description": "The max number of characters for each cell that is returned by eager evaluation. This only takes effect when spark.sql.repl.eagerEval.enabled is set to true."
    },
    {
      "name": "spark.sql.session.timeZone",
      "type": "java.lang.String",
      "defaultValue": "(value of local timezone)",
      "description": "The ID of session local timezone in the format of either region-based zone IDs or zone offsets. Region IDs must have the form \u0027area/city\u0027, such as \u0027America/Los_Angeles\u0027. Zone offsets must be in the format \u0027(+|-)HH\u0027, \u0027(+|-)HH:mm\u0027 or \u0027(+|-)HH:mm:ss\u0027, e.g \u0027-08\u0027, \u0027+01:00\u0027 or \u0027-13:33:33\u0027. Also \u0027UTC\u0027 and \u0027Z\u0027 are supported as aliases of \u0027+00:00\u0027. Other short names are not recommended to use because they can be ambiguous."
    },
    {
      "name": "spark.sql.shuffle.partitions",
      "type": "java.lang.Integer",
      "defaultValue": "200",
      "description": "The default number of partitions to use when shuffling data for joins or aggregations. Note: For structured streaming, this configuration cannot be changed between query restarts from the same checkpoint location."
    },
    {
      "name": "spark.sql.shuffledHashJoinFactor",
      "type": "java.lang.Integer",
      "defaultValue": "3",
      "description": "The shuffle hash join can be selected if the data size of small side multiplied by this factor is still smaller than the large side."
    },
    {
      "name": "spark.sql.sources.bucketing.autoBucketedScan.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, decide whether to do bucketed scan on input tables based on query plan automatically. Do not use bucketed scan if 1. query does not have operators to utilize bucketing (e.g. join, group-by, etc), or 2. there\u0027s an exchange operator between these operators and table scan. Note when \u0027spark.sql.sources.bucketing.enabled\u0027 is set to false, this configuration does not take any effect."
    },
    {
      "name": "spark.sql.sources.bucketing.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When false, we will treat bucketed table as normal table"
    },
    {
      "name": "spark.sql.sources.bucketing.maxBuckets",
      "type": "java.lang.Integer",
      "defaultValue": "100000",
      "description": "The maximum number of buckets allowed."
    },
    {
      "name": "spark.sql.sources.default",
      "type": "java.lang.String",
      "defaultValue": "parquet",
      "description": "The default data source to use in input/output."
    },
    {
      "name": "spark.sql.sources.parallelPartitionDiscovery.threshold",
      "type": "java.lang.Integer",
      "defaultValue": "32",
      "description": "The maximum number of paths allowed for listing files at driver side. If the number of detected paths exceeds this value during partition discovery, it tries to list the files with another Spark distributed job. This configuration is effective only when using file-based sources such as Parquet, JSON and ORC."
    },
    {
      "name": "spark.sql.sources.partitionColumnTypeInference.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, automatically infer the data types for partitioned columns."
    },
    {
      "name": "spark.sql.sources.partitionOverwriteMode",
      "type": "java.lang.String",
      "defaultValue": "STATIC",
      "description": "When INSERT OVERWRITE a partitioned data source table, we currently support 2 modes: static and dynamic. In static mode, Spark deletes all the partitions that match the partition specification(e.g. PARTITION(a\u003d1,b)) in the INSERT statement, before overwriting. In dynamic mode, Spark doesn\u0027t delete partitions ahead, and only overwrite those partitions that have data written into it at runtime. By default we use static mode to keep the same behavior of Spark prior to 2.3. Note that this config doesn\u0027t affect Hive serde tables, as they are always overwritten with dynamic mode. This can also be set as an output option for a data source using key partitionOverwriteMode (which takes precedence over this setting), e.g. dataframe.write.option(\"partitionOverwriteMode\", \"dynamic\").save(path)."
    },
    {
      "name": "spark.sql.sources.v2.bucketing.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Similar to spark.sql.sources.bucketing.enabled, this config is used to enable bucketing for V2 data sources. When turned on, Spark will recognize the specific distribution reported by a V2 data source through SupportsReportPartitioning, and will try to avoid shuffle if necessary."
    },
    {
      "name": "spark.sql.sources.v2.bucketing.partiallyClusteredDistribution.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "During a storage-partitioned join, whether to allow input partitions to be partially clustered, when both sides of the join are of KeyGroupedPartitioning. At planning time, Spark will pick the side with less data size based on table statistics, group and replicate them to match the other side. This is an optimization on skew join and can help to reduce data skewness when certain partitions are assigned large amount of data. This config requires both spark.sql.sources.v2.bucketing.enabled and spark.sql.sources.v2.bucketing.pushPartValues.enabled to be enabled"
    },
    {
      "name": "spark.sql.sources.v2.bucketing.pushPartValues.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to pushdown common partition values when spark.sql.sources.v2.bucketing.enabled is enabled. When turned on, if both sides of a join are of KeyGroupedPartitioning and if they share compatible partition keys, even if they don\u0027t have the exact same partition values, Spark will calculate a superset of partition values and pushdown that info to scan nodes, which will use empty partitions for the missing partition values on either side. This could help to eliminate unnecessary shuffles"
    },
    {
      "name": "spark.sql.statistics.fallBackToHdfs",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, it will fall back to HDFS if the table statistics are not available from table metadata. This is useful in determining if a table is small enough to use broadcast joins. This flag is effective only for non-partitioned Hive tables. For non-partitioned data source tables, it will be automatically recalculated if table statistics are not available. For partitioned data source and partitioned Hive tables, It is \u0027spark.sql.defaultSizeInBytes\u0027 if table statistics are not available."
    },
    {
      "name": "spark.sql.statistics.histogram.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Generates histograms when computing column statistics if enabled. Histograms can provide better estimation accuracy. Currently, Spark only supports equi-height histogram. Note that collecting histograms takes extra cost. For example, collecting column statistics usually takes only one table scan, but generating equi-height histogram will cause an extra table scan."
    },
    {
      "name": "spark.sql.statistics.size.autoUpdate.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables automatic update for table size once table\u0027s data is changed. Note that if the total number of files of the table is very large, this can be expensive and slow down data change commands."
    },
    {
      "name": "spark.sql.storeAssignmentPolicy",
      "type": "java.lang.String",
      "defaultValue": "ANSI",
      "description": "When inserting a value into a column with different data type, Spark will perform type coercion. Currently, we support 3 policies for the type coercion rules: ANSI, legacy and strict. With ANSI policy, Spark performs the type coercion as per ANSI SQL. In practice, the behavior is mostly the same as PostgreSQL. It disallows certain unreasonable type conversions such as converting string to int or double to boolean. With legacy policy, Spark allows the type coercion as long as it is a valid Cast, which is very loose. e.g. converting string to int or double to boolean is allowed. It is also the only behavior in Spark 2.x and it is compatible with Hive. With strict policy, Spark doesn\u0027t allow any possible precision loss or data truncation in type coercion, e.g. converting double to int or decimal to double is not allowed."
    },
    {
      "name": "spark.sql.streaming.checkpointLocation",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The default location for storing checkpoint data for streaming queries."
    },
    {
      "name": "spark.sql.streaming.continuous.epochBacklogQueueSize",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "The max number of entries to be stored in queue to wait for late epochs. If this parameter is exceeded by the size of the queue, stream will stop with an error."
    },
    {
      "name": "spark.sql.streaming.disabledV2Writers",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A comma-separated list of fully qualified data source register class names for which StreamWriteSupport is disabled. Writes to these sources will fall back to the V1 Sinks."
    },
    {
      "name": "spark.sql.streaming.fileSource.cleaner.numThreads",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Number of threads used in the file source completed file cleaner."
    },
    {
      "name": "spark.sql.streaming.forceDeleteTempCheckpointLocation",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, enable temporary checkpoint locations force delete."
    },
    {
      "name": "spark.sql.streaming.metricsEnabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether Dropwizard/Codahale metrics will be reported for active streaming queries."
    },
    {
      "name": "spark.sql.streaming.multipleWatermarkPolicy",
      "type": "java.lang.String",
      "defaultValue": "min",
      "description": "Policy to calculate the global watermark value when there are multiple watermark operators in a streaming query. The default value is \u0027min\u0027 which chooses the minimum watermark reported across multiple operators. Other alternative value is \u0027max\u0027 which chooses the maximum across multiple operators. Note: This configuration cannot be changed between query restarts from the same checkpoint location."
    },
    {
      "name": "spark.sql.streaming.noDataMicroBatches.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether streaming micro-batch engine will execute batches without data for eager state management for stateful streaming queries."
    },
    {
      "name": "spark.sql.streaming.numRecentProgressUpdates",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "The number of progress updates to retain for a streaming query"
    },
    {
      "name": "spark.sql.streaming.sessionWindow.merge.sessions.in.local.partition",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, streaming session window sorts and merge sessions in local partition prior to shuffle. This is to reduce the rows to shuffle, but only beneficial when there\u0027re lots of rows in a batch being assigned to same sessions."
    },
    {
      "name": "spark.sql.streaming.stateStore.stateSchemaCheck",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "When true, Spark will validate the state schema against schema on existing state and fail query if it\u0027s incompatible."
    },
    {
      "name": "spark.sql.streaming.stopActiveRunOnRestart",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Running multiple runs of the same streaming query concurrently is not supported. If we find a concurrent active run for a streaming query (in the same or different SparkSessions on the same cluster) and this flag is true, we will stop the old streaming query run to start the new one."
    },
    {
      "name": "spark.sql.streaming.stopTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "How long to wait in milliseconds for the streaming execution thread to stop when calling the streaming query\u0027s stop() method. 0 or negative values wait indefinitely."
    },
    {
      "name": "spark.sql.thriftServer.interruptOnCancel",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When true, all running tasks will be interrupted if one cancels a query. When false, all running tasks will remain until finished."
    },
    {
      "name": "spark.sql.thriftServer.queryTimeout",
      "type": "java.lang.String",
      "defaultValue": "0ms",
      "description": "Set a query duration timeout in seconds in Thrift Server. If the timeout is set to a positive value, a running query will be cancelled automatically when the timeout is exceeded, otherwise the query continues to run till completion. If timeout values are set for each statement via java.sql.Statement.setQueryTimeout and they are smaller than this configuration value, they take precedence. If you set this timeout and prefer to cancel the queries right away without waiting task to finish, consider enabling spark.sql.thriftServer.interruptOnCancel together."
    },
    {
      "name": "spark.sql.thriftserver.scheduler.pool",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Set a Fair Scheduler pool for a JDBC client session."
    },
    {
      "name": "spark.sql.thriftserver.ui.retainedSessions",
      "type": "java.lang.Integer",
      "defaultValue": "200",
      "description": "The number of SQL client sessions kept in the JDBC/ODBC web UI history."
    },
    {
      "name": "spark.sql.thriftserver.ui.retainedStatements",
      "type": "java.lang.Integer",
      "defaultValue": "200",
      "description": "The number of SQL statements kept in the JDBC/ODBC web UI history."
    },
    {
      "name": "spark.sql.timestampType",
      "type": "java.lang.String",
      "defaultValue": "TIMESTAMP_LTZ",
      "description": "Configures the default timestamp type of Spark SQL, including SQL DDL, Cast clause, type literal and the schema inference of data sources. Setting the configuration as TIMESTAMP_NTZ will use TIMESTAMP WITHOUT TIME ZONE as the default type while putting it as TIMESTAMP_LTZ will use TIMESTAMP WITH LOCAL TIME ZONE. Before the 3.4.0 release, Spark only supports the TIMESTAMP WITH LOCAL TIME ZONE type."
    },
    {
      "name": "spark.sql.ui.explainMode",
      "type": "java.lang.String",
      "defaultValue": "formatted",
      "description": "Configures the query explain mode used in the Spark SQL UI. The value can be \u0027simple\u0027, \u0027extended\u0027, \u0027codegen\u0027, \u0027cost\u0027, or \u0027formatted\u0027. The default value is \u0027formatted\u0027."
    },
    {
      "name": "spark.sql.variable.substitute",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "This enables substitution using syntax like ${var}, ${system:var}, and ${env:var}."
    },
    {
      "name": "spark.sql.cache.serializer",
      "type": "java.lang.String",
      "defaultValue": "org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer",
      "description": "The name of a class that implements org.apache.spark.sql.columnar.CachedBatchSerializer. It will be used to translate SQL data into a format that can more efficiently be cached. The underlying API is subject to change so use with caution. Multiple classes cannot be specified. The class must have a no-arg constructor."
    },
    {
      "name": "spark.sql.catalog.spark_catalog.defaultDatabase",
      "type": "java.lang.String",
      "defaultValue": "default",
      "description": "The default database for session catalog."
    },
    {
      "name": "spark.sql.event.truncate.length",
      "type": "java.lang.Integer",
      "defaultValue": "2147483647",
      "description": "Threshold of SQL length beyond which it will be truncated before adding to event. Defaults to no truncation. If set to 0, callsite will be logged instead."
    },
    {
      "name": "spark.sql.extensions",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A comma-separated list of classes that implement Function1[SparkSessionExtensions, Unit] used to configure Spark Session extensions. The classes must have a no-args constructor. If multiple extensions are specified, they are applied in the specified order. For the case of rules and planner strategies, they are applied in the specified order. For the case of parsers, the last parser is used and each parser can delegate to its predecessor. For the case of function name conflicts, the last registered function name is used."
    },
    {
      "name": "spark.sql.hive.metastore.barrierPrefixes",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "A comma separated list of class prefixes that should explicitly be reloaded for each version of Hive that Spark SQL is communicating with. For example, Hive UDFs that are declared in a prefix that typically would be shared (i.e. org.apache.spark.*)."
    },
    {
      "name": "spark.sql.hive.metastore.jars",
      "type": "java.lang.String",
      "defaultValue": "builtin",
      "description": "Location of the jars that should be used to instantiate the HiveMetastoreClient.This property can be one of four options:1. \"builtin\" Use Hive 2.3.9, which is bundled with the Spark assembly when -Phive is enabled. When this option is chosen, spark.sql.hive.metastore.version must be either 2.3.9 or not defined.2. \"maven\" Use Hive jars of specified version downloaded from Maven repositories.3. \"path\" Use Hive jars configured by spark.sql.hive.metastore.jars.path in comma separated format. Support both local or remote paths.The provided jars should be the same version as spark.sql.hive.metastore.version.4. A classpath in the standard format for both Hive and Hadoop. The provided jars should be the same version as spark.sql.hive.metastore.version."
    },
    {
      "name": "spark.sql.hive.metastore.jars.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated paths of the jars that used to instantiate the HiveMetastoreClient.This configuration is useful only when spark.sql.hive.metastore.jars is set as path.The paths can be any of the following format:1. file://path/to/jar/foo.jar2. hdfs://nameservice/path/to/jar/foo.jar3. /path/to/jar/ (path without URI scheme follow conf fs.defaultFS\u0027s URI schema)4. [http/https/ftp]://path/to/jar/foo.jarNote that 1, 2, and 3 support wildcard. For example:1. file://path/to/jar/,file://path2/to/jar//.jar2. hdfs://nameservice/path/to/jar/,hdfs://nameservice2/path/to/jar//.jar"
    },
    {
      "name": "spark.sql.hive.metastore.sharedPrefixes",
      "type": "java.lang.String",
      "defaultValue": "com.mysql.jdbc,org.postgresql,com.microsoft.sqlserver,oracle.jdbc",
      "description": "A comma separated list of class prefixes that should be loaded using the classloader that is shared between Spark SQL and a specific version of Hive. An example of classes that should be shared is JDBC drivers that are needed to talk to the metastore. Other classes that need to be shared are those that interact with classes that are already shared. For example, custom appenders that are used by log4j."
    },
    {
      "name": "spark.sql.hive.metastore.version",
      "type": "java.lang.String",
      "defaultValue": "2.3.9",
      "description": "Version of the Hive metastore. Available options are 0.12.0 through 2.3.9 and 3.0.0 through 3.1.3."
    },
    {
      "name": "spark.sql.hive.thriftServer.singleSession",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "When set to true, Hive Thrift server is running in a single session mode. All the JDBC/ODBC connections share the temporary views, function registries, SQL configuration and the current database."
    },
    {
      "name": "spark.sql.hive.version",
      "type": "java.lang.String",
      "defaultValue": "2.3.9",
      "description": "The compiled, a.k.a, builtin Hive version of the Spark distribution bundled with. Note that, this a read-only conf and only used to report the built-in hive version. If you want a different metastore client for Spark to call, please refer to spark.sql.hive.metastore.version."
    },
    {
      "name": "spark.sql.metadataCacheTTLSeconds",
      "type": "java.lang.String",
      "defaultValue": "-1000ms",
      "description": "Time-to-live (TTL) value for the metadata caches: partition file metadata cache and session catalog cache. This configuration only has an effect when this value having a positive value (\u003e 0). It also requires setting \u0027spark.sql.catalogImplementation\u0027 to hive, setting \u0027spark.sql.hive.filesourcePartitionFileCacheSize\u0027 \u003e 0 and setting \u0027spark.sql.hive.manageFilesourcePartitions\u0027 to true to be applied to the partition file metadata cache."
    },
    {
      "name": "spark.sql.queryExecutionListeners",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "List of class names implementing QueryExecutionListener that will be automatically added to newly created sessions. The classes should have either a no-arg constructor, or a constructor that expects a SparkConf argument."
    },
    {
      "name": "spark.sql.sources.disabledJdbcConnProviderList",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configures a list of JDBC connection providers, which are disabled. The list contains the name of the JDBC connection providers separated by comma."
    },
    {
      "name": "spark.sql.streaming.streamingQueryListeners",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "List of class names implementing StreamingQueryListener that will be automatically added to newly created sessions. The classes should have either a no-arg constructor, or a constructor that expects a SparkConf argument."
    },
    {
      "name": "spark.sql.streaming.ui.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Whether to run the Structured Streaming Web UI for the Spark application when the Spark Web UI is enabled."
    },
    {
      "name": "spark.sql.streaming.ui.retainedProgressUpdates",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "The number of progress updates to retain for a streaming query for Structured Streaming UI."
    },
    {
      "name": "spark.sql.streaming.ui.retainedQueries",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "The number of inactive queries to retain for Structured Streaming UI."
    },
    {
      "name": "spark.sql.ui.retainedExecutions",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "Number of executions to retain in the Spark UI."
    },
    {
      "name": "spark.sql.warehouse.dir",
      "type": "java.lang.String",
      "defaultValue": "(value of $PWD/spark-warehouse)",
      "description": "The default location for managed databases and tables."
    },
    {
      "name": "spark.streaming.backpressure.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enables or disables Spark Streaming\u0027s internal backpressure mechanism (since 1.5). This enables the Spark Streaming to control the receiving rate based on the current batch scheduling delays and processing times so that the system receives only as fast as the system can process. Internally, this dynamically sets the maximum receiving rate of receivers. This rate is upper bounded by the values spark.streaming.receiver.maxRate and spark.streaming.kafka.maxRatePerPartition if they are set (see below)."
    },
    {
      "name": "spark.streaming.backpressure.initialRate",
      "type": "java.lang.String",
      "defaultValue": "not set",
      "description": "This is the initial maximum receiving rate at which each receiver will receive data for the first batch when the backpressure mechanism is enabled."
    },
    {
      "name": "spark.streaming.blockInterval",
      "type": "java.lang.String",
      "defaultValue": "200ms",
      "description": "Interval at which data received by Spark Streaming receivers is chunked into blocks of data before storing them in Spark. Minimum recommended - 50 ms. See the performance tuning section in the Spark Streaming programming guide for more details."
    },
    {
      "name": "spark.streaming.receiver.maxRate",
      "type": "java.lang.String",
      "defaultValue": "not set",
      "description": "Maximum rate (number of records per second) at which each receiver will receive data. Effectively, each stream will consume at most this number of records per second. Setting this configuration to 0 or a negative number will put no limit on the rate. See the deployment guide in the Spark Streaming programming guide for mode details."
    },
    {
      "name": "spark.streaming.receiver.writeAheadLog.enable",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Enable write-ahead logs for receivers. All the input data received through receivers will be saved to write-ahead logs that will allow it to be recovered after driver failures. See the deployment guide in the Spark Streaming programming guide for more details."
    },
    {
      "name": "spark.streaming.unpersist",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Force RDDs generated and persisted by Spark Streaming to be automatically unpersisted from Spark\u0027s memory. The raw input data received by Spark Streaming is also automatically cleared. Setting this to false will allow the raw data and persisted RDDs to be accessible outside the streaming application as they will not be cleared automatically. But it comes at the cost of higher memory usage in Spark."
    },
    {
      "name": "spark.streaming.stopGracefullyOnShutdown",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, Spark shuts down the StreamingContext gracefully on JVM shutdown rather than immediately."
    },
    {
      "name": "spark.streaming.kafka.maxRatePerPartition",
      "type": "java.lang.String",
      "defaultValue": "not set",
      "description": "Maximum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API. See the Kafka Integration guide for more details."
    },
    {
      "name": "spark.streaming.kafka.minRatePerPartition",
      "type": "java.lang.Integer",
      "defaultValue": "1",
      "description": "Minimum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API."
    },
    {
      "name": "spark.streaming.ui.retainedBatches",
      "type": "java.lang.Integer",
      "defaultValue": "1000",
      "description": "How many batches the Spark Streaming UI and status APIs remember before garbage collecting."
    },
    {
      "name": "spark.streaming.driver.writeAheadLog.closeFileAfterWrite",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to close the file after writing a write-ahead log record on the driver. Set this to \u0027true\u0027 when you want to use S3 (or any file system that does not support flushing) for the metadata WAL on the driver."
    },
    {
      "name": "spark.streaming.receiver.writeAheadLog.closeFileAfterWrite",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Whether to close the file after writing a write-ahead log record on the receivers. Set this to \u0027true\u0027 when you want to use S3 (or any file system that does not support flushing) for the data WAL on the receivers."
    },
    {
      "name": "spark.r.numRBackendThreads",
      "type": "java.lang.Integer",
      "defaultValue": "2",
      "description": "Number of threads used by RBackend to handle RPC calls from SparkR package."
    },
    {
      "name": "spark.r.command",
      "type": "java.lang.String",
      "defaultValue": "Rscript",
      "description": "Executable for executing R scripts in cluster modes for both driver and workers."
    },
    {
      "name": "spark.r.driver.command",
      "type": "java.lang.String",
      "defaultValue": "spark.r.command",
      "description": "Executable for executing R scripts in client modes for driver. Ignored in cluster modes."
    },
    {
      "name": "spark.r.shell.command",
      "type": "java.lang.String",
      "defaultValue": "R",
      "description": "Executable for executing sparkR shell in client modes for driver. Ignored in cluster modes. It is the same as environment variable SPARKR_DRIVER_R, but take precedence over it. spark.r.shell.command is used for sparkR shell while spark.r.driver.command is used for running R script."
    },
    {
      "name": "spark.r.backendConnectionTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "6000",
      "description": "Connection timeout set by R process on its connection to RBackend in seconds."
    },
    {
      "name": "spark.r.heartBeatInterval",
      "type": "java.lang.Integer",
      "defaultValue": "100",
      "description": "Interval for heartbeats sent from SparkR backend to R process to prevent connection timeout."
    },
    {
      "name": "spark.graphx.pregel.checkpointInterval",
      "type": "java.lang.Integer",
      "defaultValue": "-1",
      "description": "Checkpoint interval for graph and message in Pregel. It used to avoid stackOverflowError due to long lineage chains after lots of iterations. The checkpoint is disabled by default."
    },
    {
      "name": "spark.deploy.recoveryMode",
      "type": "java.lang.String",
      "defaultValue": "NONE",
      "description": "The recovery mode setting to recover submitted Spark jobs with cluster mode when it failed and relaunches. This is only applicable for cluster mode when running with Standalone or Mesos."
    },
    {
      "name": "spark.deploy.zookeeper.url",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper URL to connect to."
    },
    {
      "name": "spark.deploy.zookeeper.dir",
      "type": "java.lang.String",
      "defaultValue": "None",
      "description": "When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper directory to store recovery state."
    },
    {
      "name": "spark.shuffle.push.server.mergedShuffleFileManagerImpl",
      "type": "java.lang.String",
      "defaultValue": "org.apache.spark.network.shuffle. NoOpMergedShuffleFileManager",
      "description": "Class name of the implementation of MergedShuffleFileManager that manages push-based shuffle. This acts as a server side config to disable or enable push-based shuffle. By default, push-based shuffle is disabled at the server side. To enable push-based shuffle on the server side, set this config to org.apache.spark.network.shuffle.RemoteBlockPushResolver"
    },
    {
      "name": "spark.shuffle.push.server.minChunkSizeInMergedShuffleFile",
      "type": "java.lang.String",
      "defaultValue": "2m",
      "description": "The minimum size of a chunk when dividing a merged shuffle file into multiple chunks during push-based shuffle. A merged shuffle file consists of multiple small shuffle blocks. Fetching the complete merged shuffle file in a single disk I/O increases the memory requirements for both the clients and the external shuffle services. Instead, the external shuffle service serves the merged file in MB-sized chunks. This configuration controls how big a chunk can get. A corresponding index file for each merged shuffle file will be generated indicating chunk boundaries. Setting this too high would increase the memory requirements on both the clients and the external shuffle service. Setting this too low would increase the overall number of RPC requests to external shuffle service unnecessarily."
    },
    {
      "name": "spark.shuffle.push.server.mergedIndexCacheSize",
      "type": "java.lang.String",
      "defaultValue": "100m",
      "description": "The maximum size of cache in memory which could be used in push-based shuffle for storing merged index files. This cache is in addition to the one configured via spark.shuffle.service.index.cache.size."
    },
    {
      "name": "spark.shuffle.push.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Set to true to enable push-based shuffle on the client side and works in conjunction with the server side flag spark.shuffle.push.server.mergedShuffleFileManagerImpl."
    },
    {
      "name": "spark.shuffle.push.finalize.timeout",
      "type": "java.lang.String",
      "defaultValue": "10s",
      "description": "The amount of time driver waits in seconds, after all mappers have finished for a given shuffle map stage, before it sends merge finalize requests to remote external shuffle services. This gives the external shuffle services extra time to merge blocks. Setting this too long could potentially lead to performance regression."
    },
    {
      "name": "spark.shuffle.push.maxRetainedMergerLocations",
      "type": "java.lang.Integer",
      "defaultValue": "500",
      "description": "Maximum number of merger locations cached for push-based shuffle. Currently, merger locations are hosts of external shuffle services responsible for handling pushed blocks, merging them and serving merged blocks for later shuffle fetch."
    },
    {
      "name": "spark.shuffle.push.mergersMinThresholdRatio",
      "type": "java.lang.Double",
      "defaultValue": "0.05",
      "description": "Ratio used to compute the minimum number of shuffle merger locations required for a stage based on the number of partitions for the reducer stage. For example, a reduce stage which has 100 partitions and uses the default value 0.05 requires at least 5 unique merger locations to enable push-based shuffle."
    },
    {
      "name": "spark.shuffle.push.mergersMinStaticThreshold",
      "type": "java.lang.Integer",
      "defaultValue": "5",
      "description": "The static threshold for number of shuffle push merger locations should be available in order to enable push-based shuffle for a stage. Note this config works in conjunction with spark.shuffle.push.mergersMinThresholdRatio. Maximum of spark.shuffle.push.mergersMinStaticThreshold and spark.shuffle.push.mergersMinThresholdRatio ratio number of mergers needed to enable push-based shuffle for a stage. For example: with 1000 partitions for the child stage with spark.shuffle.push.mergersMinStaticThreshold as 5 and spark.shuffle.push.mergersMinThresholdRatio set to 0.05, we would need at least 50 mergers to enable push-based shuffle for that stage."
    },
    {
      "name": "spark.shuffle.push.numPushThreads",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the number of threads in the block pusher pool. These threads assist in creating connections and pushing blocks to remote external shuffle services. By default, the threadpool size is equal to the number of spark executor cores."
    },
    {
      "name": "spark.shuffle.push.maxBlockSizeToPush",
      "type": "java.lang.String",
      "defaultValue": "1m",
      "description": "The max size of an individual block to push to the remote external shuffle services. Blocks larger than this threshold are not pushed to be merged remotely. These shuffle blocks will be fetched in the original manner. Setting this too high would result in more blocks to be pushed to remote external shuffle services but those are already efficiently fetched with the existing mechanisms resulting in additional overhead of pushing the large blocks to remote external shuffle services. It is recommended to set spark.shuffle.push.maxBlockSizeToPush lesser than spark.shuffle.push.maxBlockBatchSize config\u0027s value. Setting this too low would result in lesser number of blocks getting merged and directly fetched from mapper external shuffle service results in higher small random reads affecting overall disk I/O performance."
    },
    {
      "name": "spark.shuffle.push.maxBlockBatchSize",
      "type": "java.lang.String",
      "defaultValue": "3m",
      "description": "The max size of a batch of shuffle blocks to be grouped into a single push request. Default is set to 3m in order to keep it slightly higher than spark.storage.memoryMapThreshold default which is 2m as it is very likely that each batch of block gets memory mapped which incurs higher overhead."
    },
    {
      "name": "spark.shuffle.push.merge.finalizeThreads",
      "type": "java.lang.Integer",
      "defaultValue": "8",
      "description": "Number of threads used by driver to finalize shuffle merge. Since it could potentially take seconds for a large shuffle to finalize, having multiple threads helps driver to handle concurrent shuffle merge finalize requests when push-based shuffle is enabled."
    },
    {
      "name": "spark.shuffle.push.minShuffleSizeToWait",
      "type": "java.lang.String",
      "defaultValue": "500m",
      "description": "Driver will wait for merge finalization to complete only if total shuffle data size is more than this threshold. If total shuffle size is less, driver will immediately finalize the shuffle output."
    },
    {
      "name": "spark.shuffle.push.minCompletedPushRatio",
      "type": "java.lang.Double",
      "defaultValue": "1.0",
      "description": "Fraction of minimum map partitions that should be push complete before driver starts shuffle merge finalization during push based shuffle."
    },
    {
      "name": "spark.kubernetes.context",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The context from the user Kubernetes configuration file used for the initial auto-configuration of the Kubernetes client library. When not specified then the users current context is used. NB: Many of the auto-configured settings can be overridden by the use of other Spark configuration properties e.g. spark.kubernetes.namespace."
    },
    {
      "name": "spark.kubernetes.driver.master",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The internal Kubernetes master (API server) address to be used for driver to request executors or \u0027local[*]\u0027 for driver-pod-only mode."
    },
    {
      "name": "spark.kubernetes.namespace",
      "type": "java.lang.String",
      "defaultValue": "default",
      "description": "The namespace that will be used for running the driver and executor pods."
    },
    {
      "name": "spark.kubernetes.container.image",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Container image to use for the Spark application. This is usually of the form example.com/repo/spark:v1.0.0. This configuration is required and must be provided by the user, unless explicit images are provided for each different container type."
    },
    {
      "name": "spark.kubernetes.driver.container.image",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.kubernetes.container.image)",
      "description": "Custom container image to use for the driver."
    },
    {
      "name": "spark.kubernetes.executor.container.image",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.kubernetes.container.image)",
      "description": "Custom container image to use for executors."
    },
    {
      "name": "spark.kubernetes.container.image.pullPolicy",
      "type": "java.lang.String",
      "defaultValue": "IfNotPresent",
      "description": "Container image pull policy used when pulling images within Kubernetes. Valid values are Always, Never, and IfNotPresent."
    },
    {
      "name": "spark.kubernetes.container.image.pullSecrets",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma separated list of Kubernetes secrets used to pull images from private image registries."
    },
    {
      "name": "spark.kubernetes.allocation.batch.size",
      "type": "java.lang.Integer",
      "defaultValue": "5",
      "description": "Number of pods to launch at once in each round of executor pod allocation."
    },
    {
      "name": "spark.kubernetes.allocation.batch.delay",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "Time to wait between each round of executor pod allocation. Specifying values less than 1 second may lead to excessive CPU usage on the spark driver."
    },
    {
      "name": "spark.kubernetes.authenticate.submission.caCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the CA cert file for connecting to the Kubernetes API server over TLS when starting the driver. This file must be located on the submitting machine\u0027s disk. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.caCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.submission.clientKeyFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client key file for authenticating against the Kubernetes API server when starting the driver. This file must be located on the submitting machine\u0027s disk. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientKeyFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.submission.clientCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client cert file for authenticating against the Kubernetes API server when starting the driver. This file must be located on the submitting machine\u0027s disk. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.submission.oauthToken",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "OAuth token to use when authenticating against the Kubernetes API server when starting the driver. Note that unlike the other authentication options, this is expected to be the exact string value of the token to use for the authentication. In client mode, use spark.kubernetes.authenticate.oauthToken instead."
    },
    {
      "name": "spark.kubernetes.authenticate.submission.oauthTokenFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the OAuth token file containing the token to use when authenticating against the Kubernetes API server when starting the driver. This file must be located on the submitting machine\u0027s disk. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.oauthTokenFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.caCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the CA cert file for connecting to the Kubernetes API server over TLS from the driver pod when requesting executors. This file must be located on the submitting machine\u0027s disk, and will be uploaded to the driver pod. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.caCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.clientKeyFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client key file for authenticating against the Kubernetes API server from the driver pod when requesting executors. This file must be located on the submitting machine\u0027s disk, and will be uploaded to the driver pod as a Kubernetes secret. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientKeyFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.clientCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client cert file for authenticating against the Kubernetes API server from the driver pod when requesting executors. This file must be located on the submitting machine\u0027s disk, and will be uploaded to the driver pod as a Kubernetes secret. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.oauthToken",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "OAuth token to use when authenticating against the Kubernetes API server from the driver pod when requesting executors. Note that unlike the other authentication options, this must be the exact string value of the token to use for the authentication. This token value is uploaded to the driver pod as a Kubernetes secret. In client mode, use spark.kubernetes.authenticate.oauthToken instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.oauthTokenFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the OAuth token file containing the token to use when authenticating against the Kubernetes API server from the driver pod when requesting executors. Note that unlike the other authentication options, this file must contain the exact string value of the token to use for the authentication. This token value is uploaded to the driver pod as a secret. In client mode, use spark.kubernetes.authenticate.oauthTokenFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.mounted.caCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the CA cert file for connecting to the Kubernetes API server over TLS from the driver pod when requesting executors. This path must be accessible from the driver pod. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.caCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.mounted.clientKeyFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client key file for authenticating against the Kubernetes API server from the driver pod when requesting executors. This path must be accessible from the driver pod. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientKeyFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.mounted.clientCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the client cert file for authenticating against the Kubernetes API server from the driver pod when requesting executors. This path must be accessible from the driver pod. Specify this as a path as opposed to a URI (i.e. do not provide a scheme). In client mode, use spark.kubernetes.authenticate.clientCertFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.mounted.oauthTokenFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to the file containing the OAuth token to use when authenticating against the Kubernetes API server from the driver pod when requesting executors. This path must be accessible from the driver pod. Note that unlike the other authentication options, this file must contain the exact string value of the token to use for the authentication. In client mode, use spark.kubernetes.authenticate.oauthTokenFile instead."
    },
    {
      "name": "spark.kubernetes.authenticate.driver.serviceAccountName",
      "type": "java.lang.String",
      "defaultValue": "default",
      "description": "Service account that is used when running the driver pod. The driver pod uses this service account when requesting executor pods from the API server. Note that this cannot be specified alongside a CA cert file, client key file, client cert file, and/or OAuth token. In client mode, use spark.kubernetes.authenticate.serviceAccountName instead."
    },
    {
      "name": "spark.kubernetes.authenticate.executor.serviceAccountName",
      "type": "java.lang.String",
      "defaultValue": "(value of spark.kubernetes.authenticate.driver.serviceAccountName)",
      "description": "Service account that is used when running the executor pod. If this parameter is not setup, the fallback logic will use the driver\u0027s service account."
    },
    {
      "name": "spark.kubernetes.authenticate.caCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "In client mode, path to the CA cert file for connecting to the Kubernetes API server over TLS when requesting executors. Specify this as a path as opposed to a URI (i.e. do not provide a scheme)."
    },
    {
      "name": "spark.kubernetes.authenticate.clientKeyFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "In client mode, path to the client key file for authenticating against the Kubernetes API server when requesting executors. Specify this as a path as opposed to a URI (i.e. do not provide a scheme)."
    },
    {
      "name": "spark.kubernetes.authenticate.clientCertFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "In client mode, path to the client cert file for authenticating against the Kubernetes API server when requesting executors. Specify this as a path as opposed to a URI (i.e. do not provide a scheme)."
    },
    {
      "name": "spark.kubernetes.authenticate.oauthToken",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "In client mode, the OAuth token to use when authenticating against the Kubernetes API server when requesting executors. Note that unlike the other authentication options, this must be the exact string value of the token to use for the authentication."
    },
    {
      "name": "spark.kubernetes.authenticate.oauthTokenFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "In client mode, path to the file containing the OAuth token to use when authenticating against the Kubernetes API server when requesting executors."
    },
    {
      "name": "spark.kubernetes.driver.label.[LabelName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the label specified by LabelName to the driver pod. For example, spark.kubernetes.driver.label.something\u003dtrue. Note that Spark also adds its own labels to the driver pod for bookkeeping purposes."
    },
    {
      "name": "spark.kubernetes.driver.annotation.[AnnotationName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes annotation specified by AnnotationName to the driver pod. For example, spark.kubernetes.driver.annotation.something\u003dtrue."
    },
    {
      "name": "spark.kubernetes.driver.service.label.[LabelName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes label specified by LabelName to the driver service. For example, spark.kubernetes.driver.service.label.something\u003dtrue. Note that Spark also adds its own labels to the driver service for bookkeeping purposes."
    },
    {
      "name": "spark.kubernetes.driver.service.annotation.[AnnotationName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes annotation specified by AnnotationName to the driver service. For example, spark.kubernetes.driver.service.annotation.something\u003dtrue."
    },
    {
      "name": "spark.kubernetes.executor.label.[LabelName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the label specified by LabelName to the executor pods. For example, spark.kubernetes.executor.label.something\u003dtrue. Note that Spark also adds its own labels to the executor pod for bookkeeping purposes."
    },
    {
      "name": "spark.kubernetes.executor.annotation.[AnnotationName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes annotation specified by AnnotationName to the executor pods. For example, spark.kubernetes.executor.annotation.something\u003dtrue."
    },
    {
      "name": "spark.kubernetes.driver.pod.name",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Name of the driver pod. In cluster mode, if this is not set, the driver pod name is set to \"spark.app.name\" suffixed by the current timestamp to avoid name conflicts. In client mode, if your application is running inside a pod, it is highly recommended to set this to the name of the pod your driver is running in. Setting this value in client mode allows the driver to become the owner of its executor pods, which in turn allows the executor pods to be garbage collected by the cluster."
    },
    {
      "name": "spark.kubernetes.executor.podNamePrefix",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Prefix to use in front of the executor pod names. It must conform the rules defined by the Kubernetes DNS Label Names. The prefix will be used to generate executor pod names in the form of $podNamePrefix-exec-$id, where the `id` is a positive int value, so the length of the `podNamePrefix` needs to be less than or equal to 47(\u003d 63 - 10 - 6)."
    },
    {
      "name": "spark.kubernetes.executor.lostCheck.maxAttempts",
      "type": "java.lang.Integer",
      "defaultValue": "10",
      "description": "Number of times that the driver will try to ascertain the loss reason for a specific executor. The loss reason is used to ascertain whether the executor failure is due to a framework or an application error which in turn decides whether the executor is removed and replaced, or placed into a failed state for debugging."
    },
    {
      "name": "spark.kubernetes.submission.waitAppCompletion",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "In cluster mode, whether to wait for the application to finish before exiting the launcher process. When changed to false, the launcher has a \"fire-and-forget\" behavior when launching the Spark job."
    },
    {
      "name": "spark.kubernetes.report.interval",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "Interval between reports of the current Spark job status in cluster mode."
    },
    {
      "name": "spark.kubernetes.executor.apiPollingInterval",
      "type": "java.lang.String",
      "defaultValue": "30s",
      "description": "Interval between polls against the Kubernetes API server to inspect the state of executors."
    },
    {
      "name": "spark.kubernetes.driver.request.cores",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the cpu request for the driver pod. Values conform to the Kubernetes convention. Example values include 0.1, 500m, 1.5, 5, etc., with the definition of cpu units documented in CPU units. This takes precedence over spark.driver.cores for specifying the driver pod cpu request if set."
    },
    {
      "name": "spark.kubernetes.driver.limit.cores",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify a hard cpu limit for the driver pod."
    },
    {
      "name": "spark.kubernetes.executor.request.cores",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the cpu request for each executor pod. Values conform to the Kubernetes convention. Example values include 0.1, 500m, 1.5, 5, etc., with the definition of cpu units documented in CPU units. This is distinct from spark.executor.cores: it is only used and takes precedence over spark.executor.cores for specifying the executor pod cpu request if set. Task parallelism, e.g., number of tasks an executor can run concurrently is not affected by this."
    },
    {
      "name": "spark.kubernetes.executor.limit.cores",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify a hard cpu limit for each executor pod launched for the Spark Application."
    },
    {
      "name": "spark.kubernetes.node.selector.[labelKey]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Adds to the node selector of the driver pod and executor pods, with key labelKey and the value as the configuration\u0027s value. For example, setting spark.kubernetes.node.selector.identifier to myIdentifier will result in the driver pod and executors having a node selector with key identifier and value myIdentifier. Multiple node selector keys can be added by setting multiple configurations with this prefix."
    },
    {
      "name": "spark.kubernetes.driver.node.selector.[labelKey]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Adds to the driver node selector of the driver pod, with key labelKey and the value as the configuration\u0027s value. For example, setting spark.kubernetes.driver.node.selector.identifier to myIdentifier will result in the driver pod having a node selector with key identifier and value myIdentifier. Multiple driver node selector keys can be added by setting multiple configurations with this prefix."
    },
    {
      "name": "spark.kubernetes.executor.node.selector.[labelKey]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Adds to the executor node selector of the executor pods, with key labelKey and the value as the configuration\u0027s value. For example, setting spark.kubernetes.executor.node.selector.identifier to myIdentifier will result in the executors having a node selector with key identifier and value myIdentifier. Multiple executor node selector keys can be added by setting multiple configurations with this prefix."
    },
    {
      "name": "spark.kubernetes.driverEnv.[EnvironmentVariableName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the environment variable specified by EnvironmentVariableName to the Driver process. The user can specify multiple of these to set multiple environment variables."
    },
    {
      "name": "spark.kubernetes.driver.secrets.[SecretName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes Secret named SecretName to the driver pod on the path specified in the value. For example, spark.kubernetes.driver.secrets.spark-secret\u003d/etc/secrets."
    },
    {
      "name": "spark.kubernetes.executor.secrets.[SecretName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes Secret named SecretName to the executor pod on the path specified in the value. For example, spark.kubernetes.executor.secrets.spark-secret\u003d/etc/secrets."
    },
    {
      "name": "spark.kubernetes.driver.secretKeyRef.[EnvName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add as an environment variable to the driver container with name EnvName (case sensitive), the value referenced by key key in the data of the referenced Kubernetes Secret. For example, spark.kubernetes.driver.secretKeyRef.ENV_VAR\u003dspark-secret:key."
    },
    {
      "name": "spark.kubernetes.executor.secretKeyRef.[EnvName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add as an environment variable to the executor container with name EnvName (case sensitive), the value referenced by key key in the data of the referenced Kubernetes Secret. For example, spark.kubernetes.executor.secrets.ENV_VAR\u003dspark-secret:key."
    },
    {
      "name": "spark.kubernetes.driver.volumes.[VolumeType].[VolumeName].mount.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes Volume named VolumeName of the VolumeType type to the driver pod on the path specified in the value. For example, spark.kubernetes.driver.volumes.persistentVolumeClaim.checkpointpvc.mount.path\u003d/checkpoint."
    },
    {
      "name": "spark.kubernetes.driver.volumes.[VolumeType].[VolumeName].mount.subPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specifies a subpath to be mounted from the volume into the driver pod. spark.kubernetes.driver.volumes.persistentVolumeClaim.checkpointpvc.mount.subPath\u003dcheckpoint."
    },
    {
      "name": "spark.kubernetes.driver.volumes.[VolumeType].[VolumeName].mount.readOnly",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify if the mounted volume is read only or not. For example, spark.kubernetes.driver.volumes.persistentVolumeClaim.checkpointpvc.mount.readOnly\u003dfalse."
    },
    {
      "name": "spark.kubernetes.driver.volumes.[VolumeType].[VolumeName].options.[OptionName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configure Kubernetes Volume options passed to the Kubernetes with OptionName as key having specified value, must conform with Kubernetes option format. For example, spark.kubernetes.driver.volumes.persistentVolumeClaim.checkpointpvc.options.claimName\u003dspark-pvc-claim."
    },
    {
      "name": "spark.kubernetes.executor.volumes.[VolumeType].[VolumeName].mount.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Add the Kubernetes Volume named VolumeName of the VolumeType type to the executor pod on the path specified in the value. For example, spark.kubernetes.executor.volumes.persistentVolumeClaim.checkpointpvc.mount.path\u003d/checkpoint."
    },
    {
      "name": "spark.kubernetes.executor.volumes.[VolumeType].[VolumeName].mount.subPath",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specifies a subpath to be mounted from the volume into the executor pod. spark.kubernetes.executor.volumes.persistentVolumeClaim.checkpointpvc.mount.subPath\u003dcheckpoint."
    },
    {
      "name": "spark.kubernetes.executor.volumes.[VolumeType].[VolumeName].mount.readOnly",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Specify if the mounted volume is read only or not. For example, spark.kubernetes.executor.volumes.persistentVolumeClaim.checkpointpvc.mount.readOnly\u003dfalse."
    },
    {
      "name": "spark.kubernetes.executor.volumes.[VolumeType].[VolumeName].options.[OptionName]",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Configure Kubernetes Volume options passed to the Kubernetes with OptionName as key having specified value. For example, spark.kubernetes.executor.volumes.persistentVolumeClaim.checkpointpvc.options.claimName\u003dspark-pvc-claim."
    },
    {
      "name": "spark.kubernetes.local.dirs.tmpfs",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Configure the emptyDir volumes used to back SPARK_LOCAL_DIRS within the Spark driver and executor pods to use tmpfs backing i.e. RAM. See Local Storage earlier on this page for more discussion of this."
    },
    {
      "name": "spark.kubernetes.memoryOverheadFactor",
      "type": "java.lang.Double",
      "defaultValue": "0.1",
      "description": "This sets the Memory Overhead Factor that will allocate memory to non-JVM memory, which includes off-heap memory allocations, non-JVM tasks, various systems processes, and tmpfs-based local directories when spark.kubernetes.local.dirs.tmpfs is true. For JVM-based jobs this value will default to 0.10 and 0.40 for non-JVM jobs. This is done as non-JVM tasks need more non-JVM heap space and such tasks commonly fail with \"Memory Overhead Exceeded\" errors. This preempts this error with a higher default. This will be overridden by the value set by spark.driver.memoryOverheadFactor and spark.executor.memoryOverheadFactor explicitly."
    },
    {
      "name": "spark.kubernetes.pyspark.pythonVersion",
      "type": "java.lang.String",
      "defaultValue": "\"3\"",
      "description": "This sets the major Python version of the docker image used to run the driver and executor containers. It can be only \"3\". This configuration was deprecated from Spark 3.1.0, and is effectively no-op. Users should set \u0027spark.pyspark.python\u0027 and \u0027spark.pyspark.driver.python\u0027 configurations or \u0027PYSPARK_PYTHON\u0027 and \u0027PYSPARK_DRIVER_PYTHON\u0027 environment variables."
    },
    {
      "name": "spark.kubernetes.kerberos.krb5.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the local location of the krb5.conf file to be mounted on the driver and executors for Kerberos interaction. It is important to note that the KDC defined needs to be visible from inside the containers."
    },
    {
      "name": "spark.kubernetes.kerberos.krb5.configMapName",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the name of the ConfigMap, containing the krb5.conf file, to be mounted on the driver and executors for Kerberos interaction. The KDC defined needs to be visible from inside the containers. The ConfigMap must also be in the same namespace of the driver and executor pods."
    },
    {
      "name": "spark.kubernetes.hadoop.configMapName",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the name of the ConfigMap, containing the HADOOP_CONF_DIR files, to be mounted on the driver and executors for custom Hadoop configuration."
    },
    {
      "name": "spark.kubernetes.kerberos.tokenSecret.name",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the name of the secret where your existing delegation tokens are stored. This removes the need for the job user to provide any kerberos credentials for launching a job."
    },
    {
      "name": "spark.kubernetes.kerberos.tokenSecret.itemKey",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the item key of the data where your existing delegation tokens are stored. This removes the need for the job user to provide any kerberos credentials for launching a job."
    },
    {
      "name": "spark.kubernetes.driver.podTemplateFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the local file that contains the driver pod template. For example spark.kubernetes.driver.podTemplateFile\u003d/path/to/driver-pod-template.yaml"
    },
    {
      "name": "spark.kubernetes.driver.podTemplateContainerName",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the container name to be used as a basis for the driver in the given pod template. For example spark.kubernetes.driver.podTemplateContainerName\u003dspark-driver"
    },
    {
      "name": "spark.kubernetes.executor.podTemplateFile",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the local file that contains the executor pod template. For example spark.kubernetes.executor.podTemplateFile\u003d/path/to/executor-pod-template.yaml"
    },
    {
      "name": "spark.kubernetes.executor.podTemplateContainerName",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the container name to be used as a basis for the executor in the given pod template. For example spark.kubernetes.executor.podTemplateContainerName\u003dspark-executor"
    },
    {
      "name": "spark.kubernetes.executor.deleteOnTermination",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "Specify whether executor pods should be deleted in case of failure or normal termination."
    },
    {
      "name": "spark.kubernetes.executor.checkAllContainers",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "Specify whether executor pods should be check all containers (including sidecars) or only the executor container when determining the pod status."
    },
    {
      "name": "spark.kubernetes.submission.connectionTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "Connection timeout in milliseconds for the kubernetes client to use for starting the driver."
    },
    {
      "name": "spark.kubernetes.submission.requestTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "Request timeout in milliseconds for the kubernetes client to use for starting the driver."
    },
    {
      "name": "spark.kubernetes.trust.certificates",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If set to true then client can submit to kubernetes cluster only with token."
    },
    {
      "name": "spark.kubernetes.driver.connectionTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "Connection timeout in milliseconds for the kubernetes client in driver to use when requesting executors."
    },
    {
      "name": "spark.kubernetes.driver.requestTimeout",
      "type": "java.lang.Integer",
      "defaultValue": "10000",
      "description": "Request timeout in milliseconds for the kubernetes client in driver to use when requesting executors."
    },
    {
      "name": "spark.kubernetes.appKillPodDeletionGracePeriod",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the grace period in seconds when deleting a Spark application using spark-submit."
    },
    {
      "name": "spark.kubernetes.dynamicAllocation.deleteGracePeriod",
      "type": "java.lang.String",
      "defaultValue": "5s",
      "description": "How long to wait for executors to shut down gracefully before a forceful kill."
    },
    {
      "name": "spark.kubernetes.file.upload.path",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Path to store files at the spark submit side in cluster mode. For example: spark.kubernetes.file.upload.path\u003ds3a://\u003cs3-bucket\u003e/path File should specified as file://path/to/file or absolute path."
    },
    {
      "name": "spark.kubernetes.executor.decommissionLabel",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Label to be applied to pods which are exiting or being decommissioned. Intended for use with pod disruption budgets, deletion costs, and similar."
    },
    {
      "name": "spark.kubernetes.executor.decommissionLabelValue",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Value to be applied with the label when spark.kubernetes.executor.decommissionLabel is enabled."
    },
    {
      "name": "spark.kubernetes.executor.scheduler.name",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the scheduler name for each executor pod."
    },
    {
      "name": "spark.kubernetes.driver.scheduler.name",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the scheduler name for driver pod."
    },
    {
      "name": "spark.kubernetes.scheduler.name",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Specify the scheduler name for driver and executor pods. If `spark.kubernetes.driver.scheduler.name` or `spark.kubernetes.executor.scheduler.name` is set, will override this."
    },
    {
      "name": "spark.kubernetes.configMap.maxSize",
      "type": "java.lang.Integer",
      "defaultValue": "1572864",
      "description": "Max size limit for a config map. This is configurable as per limit on k8s server end."
    },
    {
      "name": "spark.kubernetes.executor.missingPodDetectDelta",
      "type": "java.lang.String",
      "defaultValue": "30s",
      "description": "When a registered executor\u0027s POD is missing from the Kubernetes API server\u0027s polled list of PODs then this delta time is taken as the accepted time difference between the registration time and the time of the polling. After this time the POD is considered missing from the cluster and the executor will be removed."
    },
    {
      "name": "spark.kubernetes.decommission.script",
      "type": "java.lang.String",
      "defaultValue": "/opt/decom.sh",
      "description": "The location of the script to use for graceful decommissioning."
    },
    {
      "name": "spark.kubernetes.driver.service.deleteOnTermination",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If true, driver service will be deleted on Spark application termination. If false, it will be cleaned up when the driver pod is deletion."
    },
    {
      "name": "spark.kubernetes.driver.service.ipFamilyPolicy",
      "type": "java.lang.String",
      "defaultValue": "SingleStack",
      "description": "K8s IP Family Policy for Driver Service. Valid values are SingleStack, PreferDualStack, and RequireDualStack."
    },
    {
      "name": "spark.kubernetes.driver.service.ipFamilies",
      "type": "java.lang.String",
      "defaultValue": "IPv4",
      "description": "A list of IP families for K8s Driver Service. Valid values are IPv4 and IPv6."
    },
    {
      "name": "spark.kubernetes.driver.ownPersistentVolumeClaim",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If true, driver pod becomes the owner of on-demand persistent volume claims instead of the executor pods"
    },
    {
      "name": "spark.kubernetes.driver.reusePersistentVolumeClaim",
      "type": "java.lang.Boolean",
      "defaultValue": "true",
      "description": "If true, driver pod tries to reuse driver-owned on-demand persistent volume claims of the deleted executor pods if exists. This can be useful to reduce executor pod creation delay by skipping persistent volume creations. Note that a pod in `Terminating` pod status is not a deleted pod by definition and its resources including persistent volume claims are not reusable yet. Spark will create new persistent volume claims when there exists no reusable one. In other words, the total number of persistent volume claims can be larger than the number of running executors sometimes. This config requires spark.kubernetes.driver.ownPersistentVolumeClaim\u003dtrue."
    },
    {
      "name": "spark.kubernetes.driver.waitToReusePersistentVolumeClaim",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, driver pod counts the number of created on-demand persistent volume claims and wait if the number is greater than or equal to the total number of volumes which the Spark job is able to have. This config requires both spark.kubernetes.driver.ownPersistentVolumeClaim\u003dtrue and spark.kubernetes.driver.reusePersistentVolumeClaim\u003dtrue."
    },
    {
      "name": "spark.kubernetes.executor.disableConfigMap",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, disable ConfigMap creation for executors."
    },
    {
      "name": "spark.kubernetes.driver.pod.featureSteps",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Class names of an extra driver pod feature step implementing `KubernetesFeatureConfigStep`. This is a developer API. Comma separated. Runs after all of Spark internal feature steps. Since 3.3.0, your driver feature step can implement `KubernetesDriverCustomFeatureConfigStep` where the driver config is also available."
    },
    {
      "name": "spark.kubernetes.executor.pod.featureSteps",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Class names of an extra executor pod feature step implementing `KubernetesFeatureConfigStep`. This is a developer API. Comma separated. Runs after all of Spark internal feature steps. Since 3.3.0, your executor feature step can implement `KubernetesExecutorCustomFeatureConfigStep` where the executor config is also available."
    },
    {
      "name": "spark.kubernetes.allocation.maxPendingPods",
      "type": "java.lang.String",
      "defaultValue": "Int.MaxValue",
      "description": "Maximum number of pending PODs allowed during executor allocation for this application. Those newly requested executors which are unknown by Kubernetes yet are also counted into this limit as they will change into pending PODs by time. This limit is independent from the resource profiles as it limits the sum of all allocation for all the used resource profiles."
    },
    {
      "name": "spark.kubernetes.allocation.pods.allocator",
      "type": "java.lang.String",
      "defaultValue": "direct",
      "description": "Allocator to use for pods. Possible values are direct (the default) and statefulset, or a full class name of a class implementing `AbstractPodsAllocator`. Future version may add Job or replicaset. This is a developer API and may change or be removed at anytime."
    },
    {
      "name": "spark.kubernetes.allocation.executor.timeout",
      "type": "java.lang.String",
      "defaultValue": "600s",
      "description": "Time to wait before a newly created executor POD request, which does not reached the POD pending state yet, considered timedout and will be deleted."
    },
    {
      "name": "spark.kubernetes.allocation.driver.readinessTimeout",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "Time to wait for driver pod to get ready before creating executor pods. This wait only happens on application start. If timeout happens, executor pods will still be created."
    },
    {
      "name": "spark.kubernetes.executor.enablePollingWithResourceVersion",
      "type": "java.lang.Boolean",
      "defaultValue": "false",
      "description": "If true, `resourceVersion` is set with `0` during invoking pod listing APIs in order to allow API Server-side caching. This should be used carefully."
    },
    {
      "name": "spark.kubernetes.executor.eventProcessingInterval",
      "type": "java.lang.String",
      "defaultValue": "1s",
      "description": "Interval between successive inspection of executor events sent from the Kubernetes API."
    },
    {
      "name": "spark.kubernetes.executor.rollInterval",
      "type": "java.lang.String",
      "defaultValue": "0s",
      "description": "Interval between executor roll operations. It\u0027s disabled by default with `0s`."
    },
    {
      "name": "spark.kubernetes.executor.minTasksPerExecutorBeforeRolling",
      "type": "java.lang.Integer",
      "defaultValue": "0",
      "description": "The minimum number of tasks per executor before rolling. Spark will not roll executors whose total number of tasks is smaller than this configuration. The default value is zero."
    },
    {
      "name": "spark.kubernetes.executor.rollPolicy",
      "type": "java.lang.String",
      "defaultValue": "OUTLIER",
      "description": "Executor roll policy: Valid values are ID, ADD_TIME, TOTAL_GC_TIME, TOTAL_DURATION, FAILED_TASKS, and OUTLIER (default). When executor roll happens, Spark uses this policy to choose an executor and decommission it. The built-in policies are based on executor summary and newly started executors are protected by spark.kubernetes.executor.minTasksPerExecutorBeforeRolling. ID policy chooses an executor with the smallest executor ID. ADD_TIME policy chooses an executor with the smallest add-time. TOTAL_GC_TIME policy chooses an executor with the biggest total task GC time. TOTAL_DURATION policy chooses an executor with the biggest total task time. AVERAGE_DURATION policy chooses an executor with the biggest average task time. FAILED_TASKS policy chooses an executor with the most number of failed tasks. OUTLIER policy chooses an executor with outstanding statistics which is bigger than at least two standard deviation from the mean in average task time, total task time, total task GC time, and the number of failed tasks if exists. If there is no outlier, it works like TOTAL_DURATION policy."
    },
    {
      "name": "spark.hadoop.fs.s3a.session.token",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Session token, when using org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider as one of the providers."
    },
    {
      "name": "spark.hadoop.fs.s3a.aws.credentials.provider",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Comma-separated class names of credential provider classes which implement software.amazon.awssdk.auth.credentials.AwsCredentialsProvider. \nWhen S3A delegation tokens are not enabled, this list will be used to directly authenticate with S3 and other AWS services. \nWhen S3A Delegation tokens are enabled, depending upon the delegation token binding it may be used to communicate wih the STS endpoint to request session/role credentials."
    },
    {
      "name": "spark.hadoop.fs.s3a.access.key",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "AWS Access key."
    },
    {
      "name": "spark.hadoop.fs.s3a.secret.key",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "AWS Secret key."
    },
    {
      "name": "spark.hadoop.fs.s3a.endpoint",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "AWS S3 endpoint URL."
    },
    {
      "name": "spark.hadoop.fs.s3a.impl",
      "type": "java.lang.String",
      "defaultValue": "org.apache.hadoop.fs.s3a.S3AFileSystem",
      "description": "Implementation class for S3A file system."
    },
    {
      "name": "spark.hadoop.fs.s3a.path.style.access",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "For path-style access, useful in some S3-compatible services."
    },
    {
      "name": "spark.hadoop.fs.s3a.connection.ssl.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "Enable SSL."
    },
    {
      "name": "spark.hadoop.fs.s3a.fast.upload",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "Enable faster uploads."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.type",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The underlying Iceberg catalog implementation, HiveCatalog, HadoopCatalog, RESTCatalog, GlueCatalog, JdbcCatalog, NessieCatalog or left unset if using a custom catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.catalog-impl",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The custom Iceberg catalog implementation. If type is null, catalog-impl must not be null."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.io-impl",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The custom FileIO implementation."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.metrics-reporter-impl",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "The custom MetricsReporter implementation."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.default-namespace",
      "type": "java.lang.String",
      "defaultValue": "default",
      "description": "The default current namespace for the catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.uri",
      "type": "java.lang.String",
      "defaultValue": "thrift://host:port",
      "description": "Hive metastore URL for hive typed catalog, REST URL for REST typed catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.warehouse",
      "type": "java.lang.String",
      "defaultValue": "hdfs://nn:8020/warehouse/path",
      "description": "Base path for the warehouse directory."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.cache-enabled",
      "type": "java.lang.String",
      "defaultValue": "true",
      "description": "Whether to enable catalog cache, default value is true."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.cache.expiration-interval-ms",
      "type": "java.lang.String",
      "defaultValue": "30000",
      "description": "Duration after which cached catalog entries are expired; Only effective if cache-enabled is true. -1 disables cache expiration and 0 disables caching entirely, irrespective of cache-enabled. Default is 30000 (30 seconds)."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.table-default.{propertyKey}",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Default Iceberg table property value for property key propertyKey, which will be set on tables created by this catalog if not overridden."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.table-override.{propertyKey}",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Enforced Iceberg table property value for property key propertyKey, which cannot be overridden by user."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.use-nullable-query-schema",
      "type": "java.lang.String",
      "defaultValue": "true",
      "description": "Whether to preserve fields' nullability when creating the table using CTAS and RTAS. If set to true, all fields will be marked as nullable. If set to false, fields' nullability will be preserved. The default value is true. Available in Spark 3.5 and above."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.access.key",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "Catalog specific AWS Access key. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.secret.key",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "AWS Secret key. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.endpoint",
      "type": "java.lang.String",
      "defaultValue": "",
      "description": "AWS S3 endpoint URL. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.impl",
      "type": "java.lang.String",
      "defaultValue": "org.apache.hadoop.fs.s3a.S3AFileSystem",
      "description": "Implementation class for S3A file system. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.path.style.access",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "For path-style access, useful in some S3-compatible services. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.connection.ssl.enabled",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "Enable SSL. Specific to this Catalog."
    },
    {
      "name": "spark.sql.catalog.{catalog-name}.hadoop.fs.s3a.fast.upload",
      "type": "java.lang.Boolean",
      "defaultValue": true,
      "description": "Enable faster uploads. Specific to this Catalog."
    }
  ],
  "hints": [
    {
      "name": "spark.hadoop.fs.s3a.aws.credentials.provider",
      "values": [
        {
          "value": "org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider",
          "description": "Provides temporary AWS credentials (Access Key ID, Secret Access Key, and Session Token)."
        },
        {
          "value": "org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider",
          "description": "Supplies static AWS credentials (Access Key ID and Secret Access Key)."
        },
        {
          "value": "software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider",
          "description": "Loads credentials from environment variables: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY."
        },
        {
          "value": "org.apache.hadoop.fs.s3a.auth.IAMInstanceCredentialsProvider",
          "description": "Retrieves credentials from the EC2 instance metadata service."
        }
      ]
    }
  ]
}
